{"version":3,"file":"frcv.js","sources":["../../src/track.js","../../src/album.js","../../src/artist.js","../../src/corpus.js","../../src/delegate.js"],"sourcesContent":["/**\n *\n * @class Track\n */\nexport class Track {\n\n    /**\n     *\n     * @param trackJSON\n     */\n    constructor(trackJSON) {\n\n        this.title = trackJSON.title;\n        this.fullTitle = trackJSON.fullTitle;\n        this.releaseDate = trackJSON.releaseDate;\n        this.releaseYear = trackJSON.releaseYear;\n        this.departmentNumber = trackJSON.departmentNumber;\n        this.departmentName = trackJSON.departmentName;\n        this.id = trackJSON.id;\n        this.artistID = trackJSON.artistID;\n        this.artist = trackJSON.artist;\n        this.content = trackJSON.content;\n\n        if (trackJSON.content) {\n            this.components = trackJSON.content\n                .replace(/,/g, ' ')\n                .replace(/\\./g, ' ')\n                .replace(/\\n/g, ' ')\n                .replace(/\\(/g, ' ')\n                .replace(/\\)/g, ' ')\n                .replace(/\\[/g, ' ')\n                .replace(/]/g, ' ')\n                .split(\" \")\n                .filter((word) => word.length > 0);\n        } else if (trackJSON.components) {\n            this.components = trackJSON.components;\n        }\n\n        this.componentsLowercased = this.components.map(item => item.toLowerCase());\n\n        let typesSet = new Set(this.components);\n        this.types = Array.from(typesSet);\n    }\n}\n","import {Track} from \"./track\";\n\n/**\n *\n */\nexport class Album {\n\n    constructor(albumJSON) {\n        this.name = albumJSON.name;\n        this.tracks = [];\n        for (let i = 0; i < albumJSON.tracks.length; i++) {\n            const trackJSON = albumJSON.tracks[i];\n            const track = new Track(trackJSON);\n            track.departmentNumber = albumJSON.departmentNo;\n            track.departmentName = albumJSON.departmentName;\n            track.artistID = albumJSON.geniusId;\n            track.artist = albumJSON.name;\n            this.tracks.push(track);\n        }\n    }\n}\n\nexports.Album = Album;","import {Album} from \"./album\";\nimport {Track} from \"./track\";\n\n/**\n *\n */\nexport class Artist {\n\n  constructor(artistJSON) {\n    this.name = artistJSON.name;\n    this.geniusId = artistJSON.geniusId;\n    this.sex = artistJSON.sex;\n    this.group = artistJSON.group;\n    this.department = artistJSON.department || artistJSON.departement;\n    this.departmentNo = artistJSON.departmentNo || artistJSON.departementNo;\n    this.departmentName = (artistJSON.department || artistJSON.departement)\n      .split(\"(\")[0]\n      .trim()\n      .toLowerCase();\n\n    this.albums = [];\n    for (let i = 0; i < artistJSON.albums.length; i++) {\n      const albumJSON = artistJSON.albums[i];\n      albumJSON.departmentNo = this.departmentNo;\n      albumJSON.departmentName = this.departmentName;\n      albumJSON.artistID = artistJSON.geniusId;\n      albumJSON.artist = artistJSON.name;\n      const album = new Album(albumJSON);\n      album.tracks.forEach(track => track.artistID = artistJSON.geniusId);\n      album.tracks.forEach(track => track.artist = artistJSON.name);\n      this.albums.push(album);\n    }\n\n    this.tracks = [];\n    for (let i = 0; i < artistJSON.tracks.length; i++) {\n      const trackJSON = artistJSON.tracks[i];\n      const track = new Track(trackJSON);\n      track.departmentNumber = this.departmentNo;\n      track.departmentName = this.departmentName;\n      track.artistID = artistJSON.geniusId;\n      track.artist = artistJSON.name;\n      this.tracks.push(track);\n    }\n  }\n\n  allTracks() {\n    let tracks = [];\n    for (let i = 0; i < this.albums.length; i++) {\n      const album = this.albums[i];\n      for (let i = 0; i < album.tracks.length; i++) {\n        tracks.push(album.tracks[i]);\n      }\n    }\n\n    for (let i = 0; i < this.tracks.length; i++) {\n      tracks.push(this.tracks[i]);\n    }\n    return tracks;\n  }\n\n  allWords() {\n    const allTracks = this.allTracks();\n    let allWords = [];\n    for (let i = 0; i < allTracks.length; i++) {\n      allWords.push(...allTracks[i].components);\n    }\n    return allWords;\n  }\n}\n\nexports.Artist = Artist;\n","import {Artist} from \"./artist\";\n\n/**\n *\n * @class Corpus\n */\nexport class Corpus {\n\n    /**\n     * Creates a new instace of Corpus.\n     *\n     * @param parsedCorpus\n     */\n    constructor(parsedCorpus) {\n        this.artists = [];\n        this.initialize(parsedCorpus);\n    }\n\n    /**\n     *\n     * @param parsedCorpus\n     */\n    initialize(parsedCorpus) {\n        for (let i = 0; i < parsedCorpus.length; i++) {\n            const artistJSON = parsedCorpus[i];\n            const artist = new Artist(artistJSON);\n            // const allTracks = artist.allTracks();\n            this.artists.push(artist);\n        }\n    }\n\n    /**\n     * Returns an array containing all female artists.\n     *\n     * @returns {*[]}\n     */\n    femaleArtists() {\n        return this.artists.filter(artist => artist.sex === \"F\");\n    }\n\n    /**\n     * Returns an array containing all male artists.\n     *\n     * @returns {*[]}\n     */\n    maleArtists() {\n        return this.artists.filter(artist => artist.sex === \"M\");\n    }\n\n    /**\n     * Returns an array containing all group artists.\n     *\n     * @returns {*[]}\n     */\n    groupArtists() {\n        return this.artists.filter(artist => artist.group === \"G\");\n    }\n\n    /**\n     * Returns an array with all tracks of the corpus.\n     *\n     * @returns {[]}\n     */\n    allTracks() {\n        let allTracks = [];\n        for (let i = 0; i < this.artists.length; i++) {\n            allTracks.push(...this.artists[i].allTracks());\n        }\n        return allTracks;\n    }\n\n    /**\n     * Returns an array of all words in the corpus.\n     *\n     * @returns {[]}\n     */\n    allWords() {\n        let allWords = [];\n        for (let i = 0; i < this.artists.length; i++) {\n            let wordsOfArtist = this.artists[i].allWords();\n            for (let i = 0; i < wordsOfArtist.length; i++) {\n                allWords.push(wordsOfArtist[i]);\n            }\n        }\n        return allWords;\n    }\n\n    /**\n     * Returns an array containing all albums in the corpus.\n     *\n     * @returns {[]}\n     */\n    allAlbums() {\n        let allAlbums = [];\n        for (let i = 0; i < this.artists.length; i++) {\n            allAlbums.push(...this.artists[i].albums);\n        }\n        return allAlbums;\n    }\n\n    /**\n     * Returns an array containing all tracks without an album.\n     * @returns {[]}\n     */\n    allTracksWithoutAlbum() {\n        let tracksWithoutAlbum = [];\n        for (let i = 0; i < this.artists.length; i++) {\n            tracksWithoutAlbum.push(...this.artists[i].tracks);\n        }\n        return tracksWithoutAlbum;\n    }\n\n    /**\n     * Returns an array containing all tracks which contains the given word.\n     *\n     * @param word\n     * @param sensitivity\n     * @returns {[]}\n     */\n    tracksForWord(word, sensitivity = 'case-sensitive') {\n        let tracks = [];\n        const allTracks = this.allTracks();\n\n        if (sensitivity === 'case-sensitive') {\n            for (let i = 0; i < allTracks.length; i++) {\n                if (allTracks[i].components.indexOf(word) !== -1) {\n                    tracks.push(new Track(allTracks[i]));\n                }\n            }\n        } else if (sensitivity === 'case-insensitive') {\n            word = word.toLowerCase();\n            for (let i = 0; i < allTracks.length; i++) {\n                if (allTracks[i].componentsLowercased.indexOf(word) !== -1) {\n                    tracks.push(new Track(allTracks[i]));\n                }\n            }\n        }\n\n        return tracks;\n    }\n\n    /**\n     * Returns the earliest year in the corpus.\n     * @returns {*}\n     */\n    getEarliestYear() {\n        let allTracks = this.allTracks();\n        let firstYear = allTracks.find(item => item !== undefined).releaseYear;\n        return this.allTracks().reduce((current, next) => current < next.releaseYear ? current : next.releaseYear, firstYear);\n    }\n\n    /**\n     * Returns the latest year of the corpus.\n     * @returns {*}\n     */\n    getLatestYear() {\n        let allTracks = this.allTracks();\n        let lastYear = allTracks.find(item => item !== undefined).releaseYear;\n        return this.allTracks().reduce((current, next) => current > next.releaseYear ? current : next.releaseYear, lastYear);\n    }\n\n    /**\n     * Returns departemente meta data.\n     * @returns {[]}\n     */\n    getDepartementsData() {\n        let departmentDatasets = [];\n        let allTracks = this.allTracks();\n        allTracks.forEach(function (track) {\n            let departmentNumber = track.departmentNumber;\n            let departmentName = track.departmentName;\n            let dataset = departmentDatasets.find(dataset => dataset.departmentNumber === departmentNumber);\n            if (dataset) {\n                dataset.value += 1;\n            } else {\n                departmentDatasets.push({\n                    departmentNumber: departmentNumber,\n                    departmentName: departmentName,\n                    value: 1\n                });\n            }\n        });\n\n        return departmentDatasets;\n    }\n\n    /**\n     * Returns a year to track collection.\n     *\n     * @returns {{}}\n     */\n    getLyricsPerYear() {\n        return this.createYearCollection(track => 1);\n    }\n\n    /**\n     * Returns a year to word collection.\n     * @returns {{}}\n     */\n    getWordsPerYear() {\n        return this.createYearCollection((track) => track.components.length);\n    }\n\n    /**\n     * Returns a year to words collection with relative values.\n     * @returns {{}}\n     */\n    getWordsPerYearRelative() {\n        let wordsPerYear = this.getWordsPerYear();\n        return this.calculateRelativeValues(wordsPerYear);\n    };\n\n    /**\n     * Returns a year to types collection.\n     *\n     * @returns {{}}\n     */\n    getTypesPerYear() {\n        return this.createYearCollection((track) => track.types.length);\n    };\n\n    /**\n     * Returns a year to types collection with relative values.\n     * @returns {{}}\n     */\n    getTypesPerYearRelative() {\n        let typesPerYear = this.getTypesPerYear();\n        return this.calculateRelativeValues(typesPerYear);\n    };\n\n    /**\n     * Returns a year to non standard words collection.\n     * @returns {{}}\n     */\n    getTotalNonStandardPerYearCount() {\n        return this.createYearCollection(0);\n    };\n\n    /**\n     * Return a year to.. collection.\n     * @param countFunction\n     * @returns {{}}\n     */\n    createYearCollection(countFunction) {\n        let allTracks = this.allTracks();\n        let yearCollection = {};\n        for (let i = 0; i < allTracks.length; i++) {\n            const track = allTracks[i];\n            const year = track.releaseYear;\n            if (yearCollection[year]) {\n                yearCollection[year] = yearCollection[year] + countFunction(track);\n            } else {\n                yearCollection[year] = countFunction(track);\n            }\n        }\n        return yearCollection;\n    };\n\n    /**\n     * Returns the relative version of the given year to.. collection.\n     * @param listPerYear\n     * @returns {{}}\n     */\n    calculateRelativeValues(listPerYear) {\n        let lyricsPerYear = this.getLyricsPerYear();\n        let yearCollection = {};\n        for (const yearKey in lyricsPerYear) {\n            if (lyricsPerYear.hasOwnProperty(yearKey)) {\n                let lyricsCount = lyricsPerYear[yearKey];\n                let wordsCount = listPerYear[yearKey];\n                yearCollection[yearKey] = wordsCount / lyricsCount;\n            }\n        }\n        return yearCollection;\n    };\n\n    /**\n     *\n     * @param tracks\n     * @param startYear\n     * @param lastYear\n     * @returns {[]}\n     */\n    getChartDataForTracks(tracks, startYear = 1995, lastYear = 2020) {\n        let dict = {};\n        let labels = [];\n        let values = [];\n        let valuesTotal = [];\n        let yearsTotal = [];\n\n        for (let year = startYear; year <= lastYear; year++) {\n            dict[year] = 0;\n            labels.push(year);\n        }\n\n        for (let i = 0; i < tracks.length; i++) {\n            const track = tracks[i];\n            const year = track.releaseYear;\n            if (dict[year]) {\n                dict[year] = dict[year] + 1;\n            } else {\n                dict[year] = 1;\n            }\n        }\n        labels = labels.sort();\n        if (!this.lyricsPerYear) {\n            this.lyricsPerYear = this.getLyricsPerYear();\n        }\n        let items = [];\n        for (let i = 0; i < labels.length; i++) {\n            const label = labels[i];\n            const value = dict[label] || 0;\n            const yearTotal = this.lyricsPerYear[label];\n            const relativeValue = value / yearTotal;\n            let relativeOrAbsolute = 'relative';\n            if (relativeOrAbsolute === 'relative') {\n                values.push(relativeValue);\n            } else {\n                values.push(value);\n            }\n            valuesTotal.push(value);\n            yearsTotal.push(yearTotal);\n            items.push({\n                // label: label,\n                year: label,\n                value: value,\n                yearTotal: yearTotal || 0,\n            });\n        }\n        return items;\n    };\n\n    /**\n     *\n     * @param tracks\n     * @returns {[]}\n     */\n    getMapDataForTracks(tracks) {\n        let dict = {};\n        let departmentNumbers = [];\n\n        for (let i = 0; i < tracks.length; i++) {\n            const track = tracks[i];\n            const departmentNumber = track.departmentNumber;\n\n            if (!departmentNumbers.includes(departmentNumber)) {\n                departmentNumbers.push(departmentNumber);\n            }\n\n            if (dict[departmentNumber]) {\n                dict[departmentNumber] = dict[departmentNumber] + 1;\n            } else {\n                dict[departmentNumber] = 1;\n            }\n        }\n\n        departmentNumbers = departmentNumbers.sort();\n\n        let items = [];\n        for (let i = 0; i < departmentNumbers.length; i++) {\n            const departmentNumber = departmentNumbers[i];\n            const value = dict[departmentNumber] || 0;\n            items.push({\n                dlabel: departmentNumber,\n                value: value,\n            });\n        }\n\n        return items;\n    }\n}\n","import {Corpus} from './corpus';\nimport {Artist} from \"./artist\";\nimport {Album} from \"./album\";\nimport {Track} from \"./track\";\n\n/**\n *\n * @class FRCDelegate\n */\nexport class FRCDelegate {\n\n  /**\n   * Creates a new instance of FRCDelegate.\n   */\n  constructor() {\n\n    this.name = 'French Rap Corpus Visualization';\n    this.geoJSON = 'assets/Departements-Simple.geojson';\n    this.dataJSON = 'assets/Corpus-Light.json';\n\n    let delegate = this;\n    this.loadData = function (progressFunction) {\n\n      return new Promise(function (resolve, reject) {\n\n        let req = new XMLHttpRequest();\n\n        req.addEventListener(\"progress\", function (event) {\n          if (event.lengthComputable) {\n            let percentComplete = event.loaded / event.total;\n            progressFunction(percentComplete, null);\n          } else {\n            let message = 'Unable to compute progress information since the total size is unknown';\n            progressFunction(null, message);\n          }\n        }, false);\n\n        // load responseText into a new script element\n        req.addEventListener(\"load\", function (event) {\n\n          let rawJSON = event.target.responseText;\n          delegate.rawJSON = rawJSON;\n\n          let corpusJSON = JSON.parse(rawJSON);\n          let corpus = new Corpus(corpusJSON);\n          delegate.corpus = corpus;\n\n          resolve(corpus);\n\n        }, false);\n\n        req.open(\"GET\", delegate.dataJSON);\n        req.send();\n      })\n    }.bind(this);\n  }\n}\n\nexports.Corpus = Corpus;\nexports.Artist = Artist;\nexports.Album = Album;\nexports.Track = Track;\n"],"names":["Track"],"mappings":";;;;;;;;;;;;AAIO,MAAMA,OAAK,CAAC;AAMnB,IAAI,WAAW,CAAC,SAAS,EAAE;AAE3B,QAAQ,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC,KAAK,CAAC;AACrC,QAAQ,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC,SAAS,CAAC;AAC7C,QAAQ,IAAI,CAAC,WAAW,GAAG,SAAS,CAAC,WAAW,CAAC;AACjD,QAAQ,IAAI,CAAC,WAAW,GAAG,SAAS,CAAC,WAAW,CAAC;AACjD,QAAQ,IAAI,CAAC,gBAAgB,GAAG,SAAS,CAAC,gBAAgB,CAAC;AAC3D,QAAQ,IAAI,CAAC,cAAc,GAAG,SAAS,CAAC,cAAc,CAAC;AACvD,QAAQ,IAAI,CAAC,EAAE,GAAG,SAAS,CAAC,EAAE,CAAC;AAC/B,QAAQ,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC,QAAQ,CAAC;AAC3C,QAAQ,IAAI,CAAC,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC;AACvC,QAAQ,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC,OAAO,CAAC;AAEzC,QAAQ,IAAI,SAAS,CAAC,OAAO,EAAE;AAC/B,YAAY,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC,OAAO;AAC/C,iBAAiB,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;AACnC,iBAAiB,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC;AACpC,iBAAiB,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC;AACpC,iBAAiB,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC;AACpC,iBAAiB,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC;AACpC,iBAAiB,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC;AACpC,iBAAiB,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;AACnC,iBAAiB,KAAK,CAAC,GAAG,CAAC;AAC3B,iBAAiB,MAAM,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;AACnD,SAAS,MAAM,IAAI,SAAS,CAAC,UAAU,EAAE;AACzC,YAAY,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC,UAAU,CAAC;AACnD,SAAS;AAET,QAAQ,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;AAEpF,QAAQ,IAAI,QAAQ,GAAG,IAAI,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;AAChD,QAAQ,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AAC1C,KAAK;AACL;;ACtCO,MAAM,KAAK,CAAC;AAEnB,IAAI,WAAW,CAAC,SAAS,EAAE;AAC3B,QAAQ,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC,IAAI,CAAC;AACnC,QAAQ,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;AACzB,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAC1D,YAAY,MAAM,SAAS,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;AAClD,YAAY,MAAM,KAAK,GAAG,IAAIA,OAAK,CAAC,SAAS,CAAC,CAAC;AAC/C,YAAY,KAAK,CAAC,gBAAgB,GAAG,SAAS,CAAC,YAAY,CAAC;AAC5D,YAAY,KAAK,CAAC,cAAc,GAAG,SAAS,CAAC,cAAc,CAAC;AAC5D,YAAY,KAAK,CAAC,QAAQ,GAAG,SAAS,CAAC,QAAQ,CAAC;AAChD,YAAY,KAAK,CAAC,MAAM,GAAG,SAAS,CAAC,IAAI,CAAC;AAC1C,YAAY,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AACpC,SAAS;AACT,KAAK;AACL,CAAC;AAED,OAAO,CAAC,KAAK,GAAG,KAAK;;AChBd,MAAM,MAAM,CAAC;AAEpB,EAAE,WAAW,CAAC,UAAU,EAAE;AAC1B,IAAI,IAAI,CAAC,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC;AAChC,IAAI,IAAI,CAAC,QAAQ,GAAG,UAAU,CAAC,QAAQ,CAAC;AACxC,IAAI,IAAI,CAAC,GAAG,GAAG,UAAU,CAAC,GAAG,CAAC;AAC9B,IAAI,IAAI,CAAC,KAAK,GAAG,UAAU,CAAC,KAAK,CAAC;AAClC,IAAI,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC,UAAU,IAAI,UAAU,CAAC,WAAW,CAAC;AACtE,IAAI,IAAI,CAAC,YAAY,GAAG,UAAU,CAAC,YAAY,IAAI,UAAU,CAAC,aAAa,CAAC;AAC5E,IAAI,IAAI,CAAC,cAAc,GAAG,CAAC,UAAU,CAAC,UAAU,IAAI,UAAU,CAAC,WAAW;AAC1E,OAAO,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AACpB,OAAO,IAAI,EAAE;AACb,OAAO,WAAW,EAAE,CAAC;AAErB,IAAI,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;AACrB,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACvD,MAAM,MAAM,SAAS,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;AAC7C,MAAM,SAAS,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;AACjD,MAAM,SAAS,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC;AACrD,MAAM,SAAS,CAAC,QAAQ,GAAG,UAAU,CAAC,QAAQ,CAAC;AAC/C,MAAM,SAAS,CAAC,MAAM,GAAG,UAAU,CAAC,IAAI,CAAC;AACzC,MAAM,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,SAAS,CAAC,CAAC;AACzC,MAAM,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,IAAI,KAAK,CAAC,QAAQ,GAAG,UAAU,CAAC,QAAQ,CAAC,CAAC;AAC1E,MAAM,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,IAAI,KAAK,CAAC,MAAM,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC;AACpE,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAC9B,KAAK;AAEL,IAAI,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;AACrB,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACvD,MAAM,MAAM,SAAS,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;AAC7C,MAAM,MAAM,KAAK,GAAG,IAAIA,OAAK,CAAC,SAAS,CAAC,CAAC;AACzC,MAAM,KAAK,CAAC,gBAAgB,GAAG,IAAI,CAAC,YAAY,CAAC;AACjD,MAAM,KAAK,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC;AACjD,MAAM,KAAK,CAAC,QAAQ,GAAG,UAAU,CAAC,QAAQ,CAAC;AAC3C,MAAM,KAAK,CAAC,MAAM,GAAG,UAAU,CAAC,IAAI,CAAC;AACrC,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAC9B,KAAK;AACL,GAAG;AAEH,EAAE,SAAS,GAAG;AACd,IAAI,IAAI,MAAM,GAAG,EAAE,CAAC;AACpB,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACjD,MAAM,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;AACnC,MAAM,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACpD,QAAQ,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;AACrC,OAAO;AACP,KAAK;AAEL,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACjD,MAAM,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;AAClC,KAAK;AACL,IAAI,OAAO,MAAM,CAAC;AAClB,GAAG;AAEH,EAAE,QAAQ,GAAG;AACb,IAAI,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;AACvC,IAAI,IAAI,QAAQ,GAAG,EAAE,CAAC;AACtB,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAC/C,MAAM,QAAQ,CAAC,IAAI,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC;AAChD,KAAK;AACL,IAAI,OAAO,QAAQ,CAAC;AACpB,GAAG;AACH,CAAC;AAED,OAAO,CAAC,MAAM,GAAG,MAAM;;AChEhB,MAAM,MAAM,CAAC;AAOpB,IAAI,WAAW,CAAC,YAAY,EAAE;AAC9B,QAAQ,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;AAC1B,QAAQ,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;AACtC,KAAK;AAML,IAAI,UAAU,CAAC,YAAY,EAAE;AAC7B,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,YAAY,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACtD,YAAY,MAAM,UAAU,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;AAC/C,YAAY,MAAM,MAAM,GAAG,IAAI,MAAM,CAAC,UAAU,CAAC,CAAC;AAElD,YAAY,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AACtC,SAAS;AACT,KAAK;AAOL,IAAI,aAAa,GAAG;AACpB,QAAQ,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC;AACjE,KAAK;AAOL,IAAI,WAAW,GAAG;AAClB,QAAQ,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC;AACjE,KAAK;AAOL,IAAI,YAAY,GAAG;AACnB,QAAQ,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,KAAK,KAAK,GAAG,CAAC,CAAC;AACnE,KAAK;AAOL,IAAI,SAAS,GAAG;AAChB,QAAQ,IAAI,SAAS,GAAG,EAAE,CAAC;AAC3B,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACtD,YAAY,SAAS,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC,CAAC;AAC3D,SAAS;AACT,QAAQ,OAAO,SAAS,CAAC;AACzB,KAAK;AAOL,IAAI,QAAQ,GAAG;AACf,QAAQ,IAAI,QAAQ,GAAG,EAAE,CAAC;AAC1B,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACtD,YAAY,IAAI,aAAa,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;AAC3D,YAAY,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAC3D,gBAAgB,QAAQ,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC;AAChD,aAAa;AACb,SAAS;AACT,QAAQ,OAAO,QAAQ,CAAC;AACxB,KAAK;AAOL,IAAI,SAAS,GAAG;AAChB,QAAQ,IAAI,SAAS,GAAG,EAAE,CAAC;AAC3B,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACtD,YAAY,SAAS,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;AACtD,SAAS;AACT,QAAQ,OAAO,SAAS,CAAC;AACzB,KAAK;AAML,IAAI,qBAAqB,GAAG;AAC5B,QAAQ,IAAI,kBAAkB,GAAG,EAAE,CAAC;AACpC,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACtD,YAAY,kBAAkB,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;AAC/D,SAAS;AACT,QAAQ,OAAO,kBAAkB,CAAC;AAClC,KAAK;AASL,IAAI,aAAa,CAAC,IAAI,EAAE,WAAW,GAAG,gBAAgB,EAAE;AACxD,QAAQ,IAAI,MAAM,GAAG,EAAE,CAAC;AACxB,QAAQ,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;AAE3C,QAAQ,IAAI,WAAW,KAAK,gBAAgB,EAAE;AAC9C,YAAY,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACvD,gBAAgB,IAAI,SAAS,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;AAClE,oBAAoB,MAAM,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzD,iBAAiB;AACjB,aAAa;AACb,SAAS,MAAM,IAAI,WAAW,KAAK,kBAAkB,EAAE;AACvD,YAAY,IAAI,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;AACtC,YAAY,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACvD,gBAAgB,IAAI,SAAS,CAAC,CAAC,CAAC,CAAC,oBAAoB,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;AAC5E,oBAAoB,MAAM,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzD,iBAAiB;AACjB,aAAa;AACb,SAAS;AAET,QAAQ,OAAO,MAAM,CAAC;AACtB,KAAK;AAML,IAAI,eAAe,GAAG;AACtB,QAAQ,IAAI,SAAS,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;AACzC,QAAQ,IAAI,SAAS,GAAG,SAAS,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,KAAK,SAAS,CAAC,CAAC,WAAW,CAAC;AAC/E,QAAQ,OAAO,IAAI,CAAC,SAAS,EAAE,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,IAAI,KAAK,OAAO,GAAG,IAAI,CAAC,WAAW,GAAG,OAAO,GAAG,IAAI,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;AAC9H,KAAK;AAML,IAAI,aAAa,GAAG;AACpB,QAAQ,IAAI,SAAS,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;AACzC,QAAQ,IAAI,QAAQ,GAAG,SAAS,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,KAAK,SAAS,CAAC,CAAC,WAAW,CAAC;AAC9E,QAAQ,OAAO,IAAI,CAAC,SAAS,EAAE,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,IAAI,KAAK,OAAO,GAAG,IAAI,CAAC,WAAW,GAAG,OAAO,GAAG,IAAI,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;AAC7H,KAAK;AAML,IAAI,mBAAmB,GAAG;AAC1B,QAAQ,IAAI,kBAAkB,GAAG,EAAE,CAAC;AACpC,QAAQ,IAAI,SAAS,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;AACzC,QAAQ,SAAS,CAAC,OAAO,CAAC,UAAU,KAAK,EAAE;AAC3C,YAAY,IAAI,gBAAgB,GAAG,KAAK,CAAC,gBAAgB,CAAC;AAC1D,YAAY,IAAI,cAAc,GAAG,KAAK,CAAC,cAAc,CAAC;AACtD,YAAY,IAAI,OAAO,GAAG,kBAAkB,CAAC,IAAI,CAAC,OAAO,IAAI,OAAO,CAAC,gBAAgB,KAAK,gBAAgB,CAAC,CAAC;AAC5G,YAAY,IAAI,OAAO,EAAE;AACzB,gBAAgB,OAAO,CAAC,KAAK,IAAI,CAAC,CAAC;AACnC,aAAa,MAAM;AACnB,gBAAgB,kBAAkB,CAAC,IAAI,CAAC;AACxC,oBAAoB,gBAAgB,EAAE,gBAAgB;AACtD,oBAAoB,cAAc,EAAE,cAAc;AAClD,oBAAoB,KAAK,EAAE,CAAC;AAC5B,iBAAiB,CAAC,CAAC;AACnB,aAAa;AACb,SAAS,CAAC,CAAC;AAEX,QAAQ,OAAO,kBAAkB,CAAC;AAClC,KAAK;AAOL,IAAI,gBAAgB,GAAG;AACvB,QAAQ,OAAO,IAAI,CAAC,oBAAoB,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC;AACrD,KAAK;AAML,IAAI,eAAe,GAAG;AACtB,QAAQ,OAAO,IAAI,CAAC,oBAAoB,CAAC,CAAC,KAAK,KAAK,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;AAC7E,KAAK;AAML,IAAI,uBAAuB,GAAG;AAC9B,QAAQ,IAAI,YAAY,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;AAClD,QAAQ,OAAO,IAAI,CAAC,uBAAuB,CAAC,YAAY,CAAC,CAAC;AAC1D,KAAK;AAOL,IAAI,eAAe,GAAG;AACtB,QAAQ,OAAO,IAAI,CAAC,oBAAoB,CAAC,CAAC,KAAK,KAAK,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;AACxE,KAAK;AAML,IAAI,uBAAuB,GAAG;AAC9B,QAAQ,IAAI,YAAY,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;AAClD,QAAQ,OAAO,IAAI,CAAC,uBAAuB,CAAC,YAAY,CAAC,CAAC;AAC1D,KAAK;AAML,IAAI,+BAA+B,GAAG;AACtC,QAAQ,OAAO,IAAI,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC;AAC5C,KAAK;AAOL,IAAI,oBAAoB,CAAC,aAAa,EAAE;AACxC,QAAQ,IAAI,SAAS,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;AACzC,QAAQ,IAAI,cAAc,GAAG,EAAE,CAAC;AAChC,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACnD,YAAY,MAAM,KAAK,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;AACvC,YAAY,MAAM,IAAI,GAAG,KAAK,CAAC,WAAW,CAAC;AAC3C,YAAY,IAAI,cAAc,CAAC,IAAI,CAAC,EAAE;AACtC,gBAAgB,cAAc,CAAC,IAAI,CAAC,GAAG,cAAc,CAAC,IAAI,CAAC,GAAG,aAAa,CAAC,KAAK,CAAC,CAAC;AACnF,aAAa,MAAM;AACnB,gBAAgB,cAAc,CAAC,IAAI,CAAC,GAAG,aAAa,CAAC,KAAK,CAAC,CAAC;AAC5D,aAAa;AACb,SAAS;AACT,QAAQ,OAAO,cAAc,CAAC;AAC9B,KAAK;AAOL,IAAI,uBAAuB,CAAC,WAAW,EAAE;AACzC,QAAQ,IAAI,aAAa,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;AACpD,QAAQ,IAAI,cAAc,GAAG,EAAE,CAAC;AAChC,QAAQ,KAAK,MAAM,OAAO,IAAI,aAAa,EAAE;AAC7C,YAAY,IAAI,aAAa,CAAC,cAAc,CAAC,OAAO,CAAC,EAAE;AACvD,gBAAgB,IAAI,WAAW,GAAG,aAAa,CAAC,OAAO,CAAC,CAAC;AACzD,gBAAgB,IAAI,UAAU,GAAG,WAAW,CAAC,OAAO,CAAC,CAAC;AACtD,gBAAgB,cAAc,CAAC,OAAO,CAAC,GAAG,UAAU,GAAG,WAAW,CAAC;AACnE,aAAa;AACb,SAAS;AACT,QAAQ,OAAO,cAAc,CAAC;AAC9B,KAAK;AASL,IAAI,qBAAqB,CAAC,MAAM,EAAE,SAAS,GAAG,IAAI,EAAE,QAAQ,GAAG,IAAI,EAAE;AACrE,QAAQ,IAAI,IAAI,GAAG,EAAE,CAAC;AACtB,QAAQ,IAAI,MAAM,GAAG,EAAE,CAAC;AAKxB,QAAQ,KAAK,IAAI,IAAI,GAAG,SAAS,EAAE,IAAI,IAAI,QAAQ,EAAE,IAAI,EAAE,EAAE;AAC7D,YAAY,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAC3B,YAAY,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAC9B,SAAS;AAET,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAChD,YAAY,MAAM,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;AACpC,YAAY,MAAM,IAAI,GAAG,KAAK,CAAC,WAAW,CAAC;AAC3C,YAAY,IAAI,IAAI,CAAC,IAAI,CAAC,EAAE;AAC5B,gBAAgB,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAC5C,aAAa,MAAM;AACnB,gBAAgB,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAC/B,aAAa;AACb,SAAS;AACT,QAAQ,MAAM,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC;AAC/B,QAAQ,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE;AACjC,YAAY,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;AACzD,SAAS;AACT,QAAQ,IAAI,KAAK,GAAG,EAAE,CAAC;AACvB,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAChD,YAAY,MAAM,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;AACpC,YAAY,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;AAC3C,YAAY,MAAM,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;AAUxD,YAAY,KAAK,CAAC,IAAI,CAAC;AAEvB,gBAAgB,IAAI,EAAE,KAAK;AAC3B,gBAAgB,KAAK,EAAE,KAAK;AAC5B,gBAAgB,SAAS,EAAE,SAAS,IAAI,CAAC;AACzC,aAAa,CAAC,CAAC;AACf,SAAS;AACT,QAAQ,OAAO,KAAK,CAAC;AACrB,KAAK;AAOL,IAAI,mBAAmB,CAAC,MAAM,EAAE;AAChC,QAAQ,IAAI,IAAI,GAAG,EAAE,CAAC;AACtB,QAAQ,IAAI,iBAAiB,GAAG,EAAE,CAAC;AAEnC,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAChD,YAAY,MAAM,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;AACpC,YAAY,MAAM,gBAAgB,GAAG,KAAK,CAAC,gBAAgB,CAAC;AAE5D,YAAY,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,gBAAgB,CAAC,EAAE;AAC/D,gBAAgB,iBAAiB,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;AACzD,aAAa;AAEb,YAAY,IAAI,IAAI,CAAC,gBAAgB,CAAC,EAAE;AACxC,gBAAgB,IAAI,CAAC,gBAAgB,CAAC,GAAG,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;AACpE,aAAa,MAAM;AACnB,gBAAgB,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;AAC3C,aAAa;AACb,SAAS;AAET,QAAQ,iBAAiB,GAAG,iBAAiB,CAAC,IAAI,EAAE,CAAC;AAErD,QAAQ,IAAI,KAAK,GAAG,EAAE,CAAC;AACvB,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,iBAAiB,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAC3D,YAAY,MAAM,gBAAgB,GAAG,iBAAiB,CAAC,CAAC,CAAC,CAAC;AAC1D,YAAY,MAAM,KAAK,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;AACtD,YAAY,KAAK,CAAC,IAAI,CAAC;AACvB,gBAAgB,MAAM,EAAE,gBAAgB;AACxC,gBAAgB,KAAK,EAAE,KAAK;AAC5B,aAAa,CAAC,CAAC;AACf,SAAS;AAET,QAAQ,OAAO,KAAK,CAAC;AACrB,KAAK;AACL;;ACzWO,MAAM,WAAW,CAAC;AAKzB,EAAE,WAAW,GAAG;AAEhB,IAAI,IAAI,CAAC,IAAI,GAAG,iCAAiC,CAAC;AAClD,IAAI,IAAI,CAAC,OAAO,GAAG,oCAAoC,CAAC;AACxD,IAAI,IAAI,CAAC,QAAQ,GAAG,0BAA0B,CAAC;AAE/C,IAAI,IAAI,QAAQ,GAAG,IAAI,CAAC;AACxB,IAAI,IAAI,CAAC,QAAQ,GAAG,UAAU,gBAAgB,EAAE;AAEhD,MAAM,OAAO,IAAI,OAAO,CAAC,UAAU,OAAO,EAAE,MAAM,EAAE;AAEpD,QAAQ,IAAI,GAAG,GAAG,IAAI,cAAc,EAAE,CAAC;AAEvC,QAAQ,GAAG,CAAC,gBAAgB,CAAC,UAAU,EAAE,UAAU,KAAK,EAAE;AAC1D,UAAU,IAAI,KAAK,CAAC,gBAAgB,EAAE;AACtC,YAAY,IAAI,eAAe,GAAG,KAAK,CAAC,MAAM,GAAG,KAAK,CAAC,KAAK,CAAC;AAC7D,YAAY,gBAAgB,CAAC,eAAe,EAAE,IAAI,CAAC,CAAC;AACpD,WAAW,MAAM;AACjB,YAAY,IAAI,OAAO,GAAG,wEAAwE,CAAC;AACnG,YAAY,gBAAgB,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;AAC5C,WAAW;AACX,SAAS,EAAE,KAAK,CAAC,CAAC;AAGlB,QAAQ,GAAG,CAAC,gBAAgB,CAAC,MAAM,EAAE,UAAU,KAAK,EAAE;AAEtD,UAAU,IAAI,OAAO,GAAG,KAAK,CAAC,MAAM,CAAC,YAAY,CAAC;AAClD,UAAU,QAAQ,CAAC,OAAO,GAAG,OAAO,CAAC;AAErC,UAAU,IAAI,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;AAC/C,UAAU,IAAI,MAAM,GAAG,IAAI,MAAM,CAAC,UAAU,CAAC,CAAC;AAC9C,UAAU,QAAQ,CAAC,MAAM,GAAG,MAAM,CAAC;AAEnC,UAAU,OAAO,CAAC,MAAM,CAAC,CAAC;AAE1B,SAAS,EAAE,KAAK,CAAC,CAAC;AAElB,QAAQ,GAAG,CAAC,IAAI,CAAC,KAAK,EAAE,QAAQ,CAAC,QAAQ,CAAC,CAAC;AAC3C,QAAQ,GAAG,CAAC,IAAI,EAAE,CAAC;AACnB,OAAO,CAAC;AACR,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACjB,GAAG;AACH,CAAC;AAED,OAAO,CAAC,MAAM,GAAG,MAAM,CAAC;AACxB,OAAO,CAAC,MAAM,GAAG,MAAM,CAAC;AACxB,OAAO,CAAC,KAAK,GAAG,KAAK,CAAC;AACtB,OAAO,CAAC,KAAK,GAAGA,OAAK;;;;;;;;;;"}