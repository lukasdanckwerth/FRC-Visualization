{"version":3,"file":"frcv.js","sources":["../../src/model/track.js","../../src/model/album.js","../../src/model/artist.js","../../src/model/corpus.js","../../src/index.js"],"sourcesContent":["/**\n *\n * @class Track\n */\nexport class Track {\n\n  /**\n   *\n   * @param trackJSON\n   */\n  constructor(trackJSON) {\n\n    this.title = trackJSON.title;\n    this.fullTitle = trackJSON.fullTitle;\n    this.releaseDate = trackJSON.releaseDate;\n    this.releaseYear = trackJSON.releaseYear;\n    this.departmentNumber = trackJSON.departmentNumber;\n    this.departmentName = trackJSON.departmentName;\n    this.id = trackJSON.id;\n    this.artistID = trackJSON.artistID;\n    this.artist = trackJSON.artist;\n    this.content = trackJSON.content;\n\n    if (trackJSON.content) {\n      this.components = trackJSON.content\n        .replace(/,/g, ' ')\n        .replace(/\\./g, ' ')\n        .replace(/\\n/g, ' ')\n        .replace(/\\(/g, ' ')\n        .replace(/\\)/g, ' ')\n        .replace(/\\[/g, ' ')\n        .replace(/]/g, ' ')\n        .split(\" \")\n        .filter((word) => word.length > 0);\n    } else if (trackJSON.components) {\n      this.components = trackJSON.components;\n    }\n\n    this.componentsLowercased = this.components.map(item => item.toLowerCase());\n\n    let typesSet = new Set(this.components);\n    this.types = Array.from(typesSet);\n  }\n}\n","import {Track} from \"./track\";\n\n/**\n *\n */\nexport class Album {\n\n  constructor(albumJSON) {\n    this.name = albumJSON.name;\n    this.tracks = [];\n    for (let i = 0; i < albumJSON.tracks.length; i++) {\n      const trackJSON = albumJSON.tracks[i];\n      const track = new Track(trackJSON);\n      track.departmentNumber = albumJSON.departmentNo;\n      track.departmentName = albumJSON.departmentName;\n      track.artistID = albumJSON.geniusId;\n      track.artist = albumJSON.name;\n      this.tracks.push(track);\n    }\n  }\n}\n","import {Album} from \"./album\";\nimport {Track} from \"./track\";\n\n/**\n *\n */\nexport class Artist {\n\n  constructor(artistJSON) {\n    this.name = artistJSON.name;\n    this.geniusId = artistJSON.geniusId;\n    this.sex = artistJSON.sex;\n    this.group = artistJSON.group;\n    this.department = artistJSON.department || artistJSON.departement;\n    this.departmentNo = artistJSON.departmentNo || artistJSON.departementNo;\n    this.departmentName = (artistJSON.department || artistJSON.departement)\n      .split(\"(\")[0]\n      .trim()\n      .toLowerCase();\n\n    this.albums = [];\n    for (let i = 0; i < artistJSON.albums.length; i++) {\n      const albumJSON = artistJSON.albums[i];\n      albumJSON.departmentNo = this.departmentNo;\n      albumJSON.departmentName = this.departmentName;\n      albumJSON.artistID = artistJSON.geniusId;\n      albumJSON.artist = artistJSON.name;\n      const album = new Album(albumJSON);\n      album.tracks.forEach(track => track.artistID = artistJSON.geniusId);\n      album.tracks.forEach(track => track.artist = artistJSON.name);\n      this.albums.push(album);\n    }\n\n    this.tracks = [];\n    for (let i = 0; i < artistJSON.tracks.length; i++) {\n      const trackJSON = artistJSON.tracks[i];\n      const track = new Track(trackJSON);\n      track.departmentNumber = this.departmentNo;\n      track.departmentName = this.departmentName;\n      track.artistID = artistJSON.geniusId;\n      track.artist = artistJSON.name;\n      this.tracks.push(track);\n    }\n  }\n\n  allTracks() {\n    let tracks = [];\n    for (let i = 0; i < this.albums.length; i++) {\n      const album = this.albums[i];\n      for (let i = 0; i < album.tracks.length; i++) {\n        tracks.push(album.tracks[i]);\n      }\n    }\n\n    for (let i = 0; i < this.tracks.length; i++) {\n      tracks.push(this.tracks[i]);\n    }\n    return tracks;\n  }\n\n  allWords() {\n    const allTracks = this.allTracks();\n    let allWords = [];\n    for (let i = 0; i < allTracks.length; i++) {\n      allWords.push(...allTracks[i].components);\n    }\n    return allWords;\n  }\n}\n","import {Artist} from \"./artist\";\nimport {Track} from \"./track\";\n\n/**\n *\n * @class Corpus\n */\nexport class Corpus {\n\n  /**\n   * Creates a new instance of Corpus.\n   *\n   * @param parsedCorpus\n   */\n  constructor(parsedCorpus) {\n    this.artists = [];\n    this.initialize(parsedCorpus);\n  }\n\n  /**\n   *\n   * @param parsedCorpus\n   */\n  initialize(parsedCorpus) {\n    for (let i = 0; i < parsedCorpus.length; i++) {\n      const artistJSON = parsedCorpus[i];\n      const artist = new Artist(artistJSON);\n      // const allTracks = artist.allTracks();\n      this.artists.push(artist);\n    }\n  }\n\n  /**\n   * Returns an array containing all female artists.\n   *\n   * @returns {*[]}\n   */\n  femaleArtists() {\n    return this.artists.filter(artist => artist.sex === \"F\");\n  }\n\n  /**\n   * Returns an array containing all male artists.\n   *\n   * @returns {*[]}\n   */\n  maleArtists() {\n    return this.artists.filter(artist => artist.sex === \"M\");\n  }\n\n  /**\n   * Returns an array containing all group artists.\n   *\n   * @returns {*[]}\n   */\n  groupArtists() {\n    return this.artists.filter(artist => artist.group === \"G\");\n  }\n\n  /**\n   * Returns an array with all tracks of the corpus.\n   *\n   * @returns {[]}\n   */\n  allTracks() {\n    let allTracks = [];\n    for (let i = 0; i < this.artists.length; i++) {\n      allTracks.push(...this.artists[i].allTracks());\n    }\n    return allTracks;\n  }\n\n  /**\n   * Returns an array of all words in the corpus.\n   *\n   * @returns {[]}\n   */\n  allWords() {\n    let allWords = [];\n    for (let i = 0; i < this.artists.length; i++) {\n      let wordsOfArtist = this.artists[i].allWords();\n      for (let i = 0; i < wordsOfArtist.length; i++) {\n        allWords.push(wordsOfArtist[i]);\n      }\n    }\n    return allWords;\n  }\n\n  /**\n   * Returns an array containing all albums in the corpus.\n   *\n   * @returns {[]}\n   */\n  allAlbums() {\n    let allAlbums = [];\n    for (let i = 0; i < this.artists.length; i++) {\n      allAlbums.push(...this.artists[i].albums);\n    }\n    return allAlbums;\n  }\n\n  /**\n   * Returns an array containing all tracks without an album.\n   * @returns {[]}\n   */\n  allTracksWithoutAlbum() {\n    let tracksWithoutAlbum = [];\n    for (let i = 0; i < this.artists.length; i++) {\n      tracksWithoutAlbum.push(...this.artists[i].tracks);\n    }\n    return tracksWithoutAlbum;\n  }\n\n  /**\n   * Returns an array containing all tracks which contains the given word.\n   *\n   * @param word\n   * @param sensitivity\n   * @returns {[]}\n   */\n  tracksForWord(word, sensitivity = 'case-sensitive') {\n    let tracks = [];\n    const allTracks = this.allTracks();\n\n    if (sensitivity === 'case-sensitive') {\n      for (let i = 0; i < allTracks.length; i++) {\n        if (allTracks[i].components.indexOf(word) !== -1) {\n          tracks.push(new Track(allTracks[i]));\n        }\n      }\n    } else if (sensitivity === 'case-insensitive') {\n      word = word.toLowerCase();\n      for (let i = 0; i < allTracks.length; i++) {\n        if (allTracks[i].componentsLowercased.indexOf(word) !== -1) {\n          tracks.push(new Track(allTracks[i]));\n        }\n      }\n    }\n\n    return tracks;\n  }\n\n  /**\n   * Returns the earliest year in the corpus.\n   * @returns {*}\n   */\n  getEarliestYear() {\n    let allTracks = this.allTracks();\n    let firstYear = allTracks.find(item => item !== undefined).releaseYear;\n    return this.allTracks().reduce((current, next) => current < next.releaseYear ? current : next.releaseYear, firstYear);\n  }\n\n  /**\n   * Returns the latest year of the corpus.\n   * @returns {*}\n   */\n  getLatestYear() {\n    let allTracks = this.allTracks();\n    let lastYear = allTracks.find(item => item !== undefined).releaseYear;\n    return this.allTracks().reduce((current, next) => current > next.releaseYear ? current : next.releaseYear, lastYear);\n  }\n\n  /**\n   * Returns a year to track collection.\n   *\n   * @returns {{}}\n   */\n  getYearsToTrackNumbers() {\n    return this.getYearsToCollection(track => 1);\n  }\n\n  /**\n   * Returns a year to word collection.\n   * @returns {{}}\n   */\n  getYearsToWords() {\n    return this.getYearsToCollection((track) => track.components.length);\n  }\n\n  /**\n   * Returns a year to words collection with relative values.\n   * @returns {{}}\n   */\n  getYearsToWordsRelative() {\n    let wordsPerYear = this.getYearsToWords();\n    return this.getYearsToCollectionRelative(wordsPerYear);\n  };\n\n  /**\n   * Returns a year to types collection.\n   *\n   * @returns {{}}\n   */\n  getYearsToTypes() {\n    return this.getYearsToCollection((track) => track.types.length);\n  };\n\n  /**\n   * Returns a year to types collection with relative values.\n   * @returns {{}}\n   */\n  getYearsToTypesRelative() {\n    let typesPerYear = this.getYearsToTypes();\n    return this.getYearsToCollectionRelative(typesPerYear);\n  };\n\n  /**\n   * Return a year to.. collection.\n   * @param countFunction\n   * @returns {{}}\n   */\n  getYearsToCollection(countFunction) {\n    let allTracks = this.allTracks();\n    let yearCollection = {};\n    for (let i = 0; i < allTracks.length; i++) {\n      const track = allTracks[i];\n      const year = track.releaseYear;\n      if (yearCollection[year]) {\n        yearCollection[year] = yearCollection[year] + countFunction(track);\n      } else {\n        yearCollection[year] = countFunction(track);\n      }\n    }\n    return yearCollection;\n  };\n\n  /**\n   * Returns the relative version of the given year to.. collection.\n   *\n   * @param listPerYear\n   * @returns {{}}\n   */\n  getYearsToCollectionRelative(listPerYear) {\n    let lyricsPerYear = this.getYearsToTrackNumbers();\n    let yearCollection = {};\n    for (const yearKey in lyricsPerYear) {\n      if (lyricsPerYear.hasOwnProperty(yearKey)) {\n        let lyricsCount = lyricsPerYear[yearKey];\n        let wordsCount = listPerYear[yearKey];\n        yearCollection[yearKey] = wordsCount / lyricsCount;\n      }\n    }\n    return yearCollection;\n  };\n\n  /**\n   * Returns a departments to year collection.\n   *\n   * @returns {{}}\n   */\n  getDepartmentsToTracks() {\n    return this.getDepartmentsToCollection(() => 1);\n  }\n\n  /**\n   * Returns a year to word collection.\n   *\n   * @returns {{}}\n   */\n  getDepartmentsToWords() {\n    return this.getDepartmentsToCollection((track) => track.components.length);\n  }\n\n  /**\n   * Returns a year to words collection with relative values.\n   *\n   * @returns {{}}\n   */\n  getDepartmentsToWordsRelative() {\n    let wordsPerYear = this.getDepartmentsToWords();\n    return this.getDepartmentsToCollectionRelative(wordsPerYear);\n  };\n\n  /**\n   * Returns a year to types collection.\n   *\n   * @returns {{}}\n   */\n  getDepartmentsToTypes() {\n    return this.getDepartmentsToCollection((track) => track.types.length);\n  };\n\n  /**\n   * Returns a year to types collection with relative values.\n   *\n   * @returns {{}}\n   */\n  getDepartmentsToTypesRelative() {\n    let typesPerYear = this.getDepartmentsToTypes();\n    return this.getDepartmentsToCollectionRelative(typesPerYear);\n  };\n\n  /**\n   * Returns a departement to.. collection.\n   *\n   * @param countFunction\n   * @returns {{}}\n   */\n  getDepartmentsToCollection(countFunction) {\n    let departmentDatasets = [];\n    let allTracks = this.allTracks();\n    allTracks.forEach(function (track) {\n      let location = track.departmentNumber;\n      let departmentName = track.departmentName;\n      let dataset = departmentDatasets.find(dataset => dataset.location === location);\n      if (dataset) {\n        dataset.value += countFunction(track);\n      } else {\n        departmentDatasets.push({\n          location: location,\n          locationName: departmentName,\n          value: countFunction(track)\n        });\n      }\n    });\n    return departmentDatasets;\n  };\n\n  /**\n   * Returns the relative version of the given department to.. collection.\n   *\n   * @param listPerYear\n   * @returns {{}}\n   */\n  getDepartmentsToCollectionRelative(listPerDepartement) {\n    let tracksPerDepartment = this.getDepartmentsToTracks();\n    for (let index = 0; index < listPerDepartement.length; index++) {\n      let item = listPerDepartement[index];\n      let location = item.location;\n      let trackCount = tracksPerDepartment.find(item => item.location === location);\n      let itemCount = listPerDepartement.find(item => item.location === location);\n      item.value = itemCount.value / trackCount.value;\n    }\n\n    return listPerDepartement;\n  };\n\n  /**\n   *\n   * @param tracks\n   * @returns {[]}\n   */\n  createYearDataForTracks(tracks) {\n    let yearToAmount = {};\n    let includedYears = [];\n    if (!this.lyricsPerYear) {\n      this.lyricsPerYear = this.getYearsToTrackNumbers();\n    }\n\n    for (let i = 0; i < tracks.length; i++) {\n\n      const track = tracks[i];\n      const year = track.releaseYear;\n\n      if (yearToAmount[year]) {\n        yearToAmount[year] = yearToAmount[year] + 1;\n      } else {\n        includedYears.push(year);\n        yearToAmount[year] = 1;\n      }\n    }\n\n    includedYears = includedYears.sort();\n\n    let items = [];\n    for (let i = 0; i < includedYears.length; i++) {\n      const year = includedYears[i];\n      const yearTotal = this.lyricsPerYear[year];\n      const value = yearToAmount[year] || 0;\n      const relativeValue = value / yearTotal;\n\n      items.push({\n        date: year,\n        dateTotal: yearTotal || 0,\n        value: value,\n        relativeDateValue: relativeValue\n      });\n    }\n    return items;\n  }\n\n  /**\n   *\n   * @param tracks\n   * @returns {[]}\n   */\n  createDepartmentDataForTracks(tracks) {\n    let locationToAmount = {};\n    let departmentNumbers = [];\n    let tracksPerDepartement = this.getDepartmentsToTracks();\n\n    for (let i = 0; i < tracks.length; i++) {\n      const track = tracks[i];\n      const departmentNumber = track.departmentNumber;\n\n      if (!departmentNumbers.includes(departmentNumber)) {\n        departmentNumbers.push(departmentNumber);\n      }\n\n      if (locationToAmount[departmentNumber]) {\n        locationToAmount[departmentNumber] = locationToAmount[departmentNumber] + 1;\n      } else {\n        locationToAmount[departmentNumber] = 1;\n      }\n    }\n\n    departmentNumbers = departmentNumbers.sort();\n\n    let items = [];\n    for (let i = 0; i < departmentNumbers.length; i++) {\n      const departmentNumber = departmentNumbers[i];\n      const value = locationToAmount[departmentNumber] || 0;\n      items.push({\n        location: departmentNumber,\n        value: value,\n        relativeLocationValue: value\n      });\n    }\n\n    return items;\n  }\n\n  search(searchQuery) {\n\n    // clean search query\n    let groups = searchQuery.split(';').map(value => value.trim());\n    groups = groups.map(group => group.split(',').map(word => word.trim()).join(','));\n    groups = groups.map(group => group.trim());\n    let searchTextFormatted = groups.join(';');\n\n    let datasets = [];\n\n    for (let i = 0; i < groups.length; i++) {\n\n      let group = groups[i];\n      let words = group.split(',').map(value => value.trim());\n      let stack = words.join(\", \");\n\n      for (let j = 0; j < words.length; j++) {\n\n        let searchWord = words[j];\n        let dataset = this.datasetFor(searchWord, stack);\n\n        console.log(stack);\n\n        datasets.push(dataset);\n      }\n    }\n\n    return datasets;\n  }\n\n  datasetFor(searchText, stack) {\n\n    let sensitivity = 'case-sensitive'; // this.searchCard.sensitivity;\n    let firstYear = 1995; // this.searchCard.firstYear;\n    let lastYear = 2020; // this.searchCard.lastYear;\n    let tracks = this.tracksForWord(searchText, sensitivity);\n\n    tracks = tracks.filter(function (track) {\n      return track.releaseYear >= firstYear\n        && track.releaseYear <= lastYear;\n    });\n\n    let chartData = this.createYearAndDepartmentsDataForTracks(\n      tracks,\n      firstYear,\n      lastYear,\n      sensitivity\n    );\n\n    return {\n      label: searchText,\n      stack: stack || searchText,\n      data: chartData\n    };\n  }\n\n  /**\n   *\n   * @param tracks\n   * @returns {[]}\n   */\n  createYearAndDepartmentsDataForTracks(tracks, firstYear, lastYear, sensitivity) {\n    let items = [];\n    let yearsToTrackNumbers = this.getYearsToTrackNumbers();\n    let tracksPerDepartement = this.getDepartmentsToTracks();\n    let theFirstYear = firstYear || this.getEarliestYear();\n    let theLastYear = lastYear || this.getLatestYear();\n\n    for (let index = 0; index < tracks.length; index++) {\n      let track = tracks[index];\n      let year = track.releaseYear;\n      let department = track.departmentNumber;\n\n      let entry = items.find(function (item) {\n        return item.location === department\n          && item.date === year;\n      });\n\n      if (entry) {\n        entry.value += 1;\n      } else {\n        let departmentEntry = tracksPerDepartement.find(entry => entry.location === department);\n        items.push({\n          location: department,\n          date: year,\n          value: 1,\n          dateTotal: yearsToTrackNumbers[year],\n          locationTotal: departmentEntry.value,\n        });\n      }\n\n      for (let year = theFirstYear; year <= theLastYear; year++) {\n        if (items.find(item => item.date === theLastYear)) continue;\n        items.push({\n          date: year,\n          value: 0,\n          dateTotal: yearsToTrackNumbers[year]\n        });\n      }\n    }\n\n    return items;\n  }\n}\n","import {Corpus} from \"./model/corpus\";\nimport {Artist} from \"./model/artist\";\nimport {Album} from \"./model/album\";\nimport {Track} from \"./model/track\";\n\nexports.Track = Track;\nexports.Album = Album;\nexports.Artist = Artist;\nexports.Corpus = Corpus;\n"],"names":[],"mappings":"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"}