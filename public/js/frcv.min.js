/*!
 * frcv.js v1.0.8
 * undefined
 * (c) 2021 frcv.js Lukas Danckwerth
 * Released under the MIT License
 */
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).frcv={})}(this,(function(e){"use strict";class t{constructor(e){this.title=e.title,this.fullTitle=e.fullTitle,this.releaseDate=e.releaseDate,this.releaseYear=e.releaseYear,this.departmentNumber=e.departmentNumber,this.departmentName=e.departmentName,this.id=e.id,this.artistID=e.artistID,this.artist=e.artist,this.content=e.content,e.content?this.components=e.content.replace(/,/g," ").replace(/\./g," ").replace(/\n/g," ").replace(/\(/g," ").replace(/\)/g," ").replace(/\[/g," ").replace(/]/g," ").split(" ").filter((e=>e.length>0)):e.components&&(this.components=e.components),this.componentsLowercased=this.components.map((e=>e.toLowerCase()));let t=new Set(this.components);this.types=Array.from(t)}}class r{constructor(e){this.name=e.name,this.tracks=[];for(let r=0;r<e.tracks.length;r++){const s=e.tracks[r],a=new t(s);a.departmentNumber=e.departmentNo,a.departmentName=e.departmentName,a.artistID=e.geniusId,a.artist=e.name,this.tracks.push(a)}}}e.Album=r;class s{constructor(e){this.name=e.name,this.geniusId=e.geniusId,this.sex=e.sex,this.group=e.group,this.department=e.department||e.departement,this.departmentNo=e.departmentNo||e.departementNo,this.departmentName=(e.department||e.departement).split("(")[0].trim().toLowerCase(),this.albums=[];for(let t=0;t<e.albums.length;t++){const s=e.albums[t];s.departmentNo=this.departmentNo,s.departmentName=this.departmentName,s.artistID=e.geniusId,s.artist=e.name;const a=new r(s);a.tracks.forEach((t=>t.artistID=e.geniusId)),a.tracks.forEach((t=>t.artist=e.name)),this.albums.push(a)}this.tracks=[];for(let r=0;r<e.tracks.length;r++){const s=e.tracks[r],a=new t(s);a.departmentNumber=this.departmentNo,a.departmentName=this.departmentName,a.artistID=e.geniusId,a.artist=e.name,this.tracks.push(a)}}allTracks(){let e=[];for(let t=0;t<this.albums.length;t++){const r=this.albums[t];for(let t=0;t<r.tracks.length;t++)e.push(r.tracks[t])}for(let t=0;t<this.tracks.length;t++)e.push(this.tracks[t]);return e}allWords(){const e=this.allTracks();let t=[];for(let r=0;r<e.length;r++)t.push(...e[r].components);return t}}e.Artist=s;class a{constructor(e){this.artists=[],this.initialize(e)}initialize(e){for(let t=0;t<e.length;t++){const r=e[t],a=new s(r);this.artists.push(a)}}femaleArtists(){return this.artists.filter((e=>"F"===e.sex))}maleArtists(){return this.artists.filter((e=>"M"===e.sex))}groupArtists(){return this.artists.filter((e=>"G"===e.group))}allTracks(){let e=[];for(let t=0;t<this.artists.length;t++)e.push(...this.artists[t].allTracks());return e}allWords(){let e=[];for(let t=0;t<this.artists.length;t++){let r=this.artists[t].allWords();for(let t=0;t<r.length;t++)e.push(r[t])}return e}allAlbums(){let e=[];for(let t=0;t<this.artists.length;t++)e.push(...this.artists[t].albums);return e}allTracksWithoutAlbum(){let e=[];for(let t=0;t<this.artists.length;t++)e.push(...this.artists[t].tracks);return e}tracksForWord(e,t="case-sensitive"){let r=[];const s=this.allTracks();if("case-sensitive"===t)for(let t=0;t<s.length;t++)-1!==s[t].components.indexOf(e)&&r.push(new Track(s[t]));else if("case-insensitive"===t){e=e.toLowerCase();for(let t=0;t<s.length;t++)-1!==s[t].componentsLowercased.indexOf(e)&&r.push(new Track(s[t]))}return r}getEarliestYear(){let e=this.allTracks().find((e=>void 0!==e)).releaseYear;return this.allTracks().reduce(((e,t)=>e<t.releaseYear?e:t.releaseYear),e)}getLatestYear(){let e=this.allTracks().find((e=>void 0!==e)).releaseYear;return this.allTracks().reduce(((e,t)=>e>t.releaseYear?e:t.releaseYear),e)}getLyricsPerYear(){return this.createYearCollection((e=>1))}getWordsPerYear(){return this.createYearCollection((e=>e.components.length))}getWordsPerYearRelative(){let e=this.getWordsPerYear();return this.calculateRelativeValues(e)}getTypesPerYear(){return this.createYearCollection((e=>e.types.length))}getTypesPerYearRelative(){let e=this.getTypesPerYear();return this.calculateRelativeValues(e)}getTotalNonStandardPerYearCount(){return this.createYearCollection(0)}createYearCollection(e){let t=this.allTracks(),r={};for(let s=0;s<t.length;s++){const a=t[s],n=a.releaseYear;r[n]?r[n]=r[n]+e(a):r[n]=e(a)}return r}calculateRelativeValues(e){let t=this.getLyricsPerYear(),r={};for(const s in t)if(t.hasOwnProperty(s)){let a=t[s],n=e[s];r[s]=n/a}return r}getTracksPerDepartment(){return this.createDepartementCollection((e=>1))}getWordsPerDepartment(){return this.createDepartementCollection((e=>e.components.length))}getWordsPerDepartmentRelative(){let e=this.getWordsPerDepartment();return this.calculateRelativeDepartmentValues(e)}getTypesPerDepartment(){return this.createDepartementCollection((e=>e.types.length))}getTypesPerDepartmentRelative(){let e=this.getTypesPerDepartment();return this.calculateRelativeDepartmentValues(e)}createDepartementCollection(e){let t=[];return this.allTracks().forEach((function(r){let s=r.departmentNumber,a=r.departmentName,n=t.find((e=>e.location===s));n?n.value+=e(r):t.push({location:s,locationName:a,value:e(r)})})),t}calculateRelativeDepartmentValues(e){let t=this.getTracksPerDepartment();for(let r=0;r<e.length;r++){let s=e[r],a=s.location,n=t.find((e=>e.location===a)),l=e.find((e=>e.location===a));s.value=l.value/n.value}return e}getChartDataForTracks(e,t=1995,r=2020){let s={},a=[];for(let e=t;e<=r;e++)s[e]=0,a.push(e);for(let t=0;t<e.length;t++){const r=e[t].releaseYear;s[r]?s[r]=s[r]+1:s[r]=1}a=a.sort(),this.lyricsPerYear||(this.lyricsPerYear=this.getLyricsPerYear());let n=[];for(let e=0;e<a.length;e++){const t=a[e],r=s[t]||0,l=this.lyricsPerYear[t];n.push({year:t,value:r,yearTotal:l||0})}return n}getMapDataForTracks(e){let t={},r=[];for(let s=0;s<e.length;s++){const a=e[s].departmentNumber;r.includes(a)||r.push(a),t[a]?t[a]=t[a]+1:t[a]=1}r=r.sort();let s=[];for(let e=0;e<r.length;e++){const a=r[e],n=t[a]||0;s.push({dlabel:a,value:n})}return s}}e.Corpus=a,e.Artist=s,e.Album=r,e.Track=t,e.FRCDelegate=class{constructor(){this.name="French Rap Corpus Visualization",this.geoJSON="assets/Departements.geojson",this.dataJSON="assets/Corpus-Light.json";let e=this;this.loadData=function(t){return new Promise((function(r,s){let n=new XMLHttpRequest;n.addEventListener("progress",(function(e){if(e.lengthComputable){let r=e.loaded/e.total;t(r,null)}else{t(null,"Unable to compute progress information since the total size is unknown")}}),!1),n.addEventListener("load",(function(t){let s=t.target.responseText;e.rawJSON=s;let n=JSON.parse(s),l=new a(n);e.corpus=l,r(l)}),!1),n.open("GET",e.dataJSON),n.send()}))}.bind(this)}},Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=frcv.min.js.map
