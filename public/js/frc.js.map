{"version":3,"file":"frc.js","sources":["../../src/model/track.js","../../src/model/album.js","../../src/model/artist.js","../../src/access/year-relations.js","../../src/access/department-relations.js","../../src/access/search.js","../../src/access/tracks-access.js","../../src/access/artists-for-locations.js","../../src/model/corpus.js"],"sourcesContent":["/**\n *\n * @class Track\n */\nexport class Track {\n\n  /**\n   *\n   * @param trackJSON\n   */\n  constructor(trackJSON) {\n\n    this.title = trackJSON.title;\n    this.fullTitle = trackJSON.fullTitle;\n    this.releaseDate = trackJSON.releaseDate;\n    this.releaseYear = trackJSON.releaseYear;\n    this.departmentNumber = trackJSON.departmentNumber;\n    this.departmentName = trackJSON.departmentName;\n    this.id = trackJSON.id;\n    this.artistID = trackJSON.artistID;\n    this.artist = trackJSON.artist;\n    this.content = trackJSON.content;\n\n    if (trackJSON.content) {\n      this.components = trackJSON.content\n        .replace(/,/g, ' ')\n        .replace(/\\./g, ' ')\n        .replace(/\\n/g, ' ')\n        .replace(/\\(/g, ' ')\n        .replace(/\\)/g, ' ')\n        .replace(/\\[/g, ' ')\n        .replace(/]/g, ' ')\n        .split(\" \")\n        .filter((word) => word.length > 0);\n    } else if (trackJSON.components) {\n      this.components = trackJSON.components;\n    }\n\n    this.componentsLowercased = this.components.map(item => item.toLowerCase());\n\n    let typesSet = new Set(this.components);\n    this.types = Array.from(typesSet);\n  }\n}\n","import {Track} from \"./track\";\n\n/**\n *\n */\nexport class Album {\n\n  constructor(albumJSON) {\n    this.name = albumJSON.name;\n    this.tracks = [];\n    for (let i = 0; i < albumJSON.tracks.length; i++) {\n      const trackJSON = albumJSON.tracks[i];\n      const track = new Track(trackJSON);\n      track.departmentNumber = albumJSON.departmentNo;\n      track.departmentName = albumJSON.departmentName;\n      track.artistID = albumJSON.geniusId;\n      track.artist = albumJSON.name;\n      this.tracks.push(track);\n    }\n  }\n}\n","import {Album} from \"./album\";\nimport {Track} from \"./track\";\n\n/**\n *\n */\nexport class Artist {\n\n  constructor(rawJSON) {\n    this.name = rawJSON.name;\n    this.geniusId = rawJSON.geniusId;\n    this.sex = rawJSON.sex;\n    this.group = rawJSON.group;\n    this.department = rawJSON.department || rawJSON.departement;\n    this.departmentNo = rawJSON.departmentNo || rawJSON.departementNo;\n    this.departmentName = (rawJSON.department || rawJSON.departement)\n      .split(\"(\")[0]\n      .trim()\n      .toLowerCase();\n\n    this.albums = [];\n    for (let i = 0; i < rawJSON.albums.length; i++) {\n      const albumJSON = rawJSON.albums[i];\n      albumJSON.departmentNo = this.departmentNo;\n      albumJSON.departmentName = this.departmentName;\n      albumJSON.artistID = rawJSON.geniusId;\n      albumJSON.artist = rawJSON.name;\n      const album = new Album(albumJSON);\n      album.tracks.forEach(track => track.artistID = rawJSON.geniusId);\n      album.tracks.forEach(track => track.artist = rawJSON.name);\n      this.albums.push(album);\n    }\n\n    this.tracks = [];\n    for (let i = 0; i < rawJSON.tracks.length; i++) {\n      const trackJSON = rawJSON.tracks[i];\n      const track = new Track(trackJSON);\n      track.departmentNumber = this.departmentNo;\n      track.departmentName = this.departmentName;\n      track.artistID = rawJSON.geniusId;\n      track.artist = rawJSON.name;\n      this.tracks.push(track);\n    }\n  }\n\n  allTracks() {\n    let tracks = [];\n    for (let i = 0; i < this.albums.length; i++) {\n      const album = this.albums[i];\n      for (let i = 0; i < album.tracks.length; i++) {\n        tracks.push(album.tracks[i]);\n      }\n    }\n\n    for (let i = 0; i < this.tracks.length; i++) {\n      tracks.push(this.tracks[i]);\n    }\n    return tracks;\n  }\n\n  allWords() {\n    const allTracks = this.allTracks();\n    let allWords = [];\n    for (let i = 0; i < allTracks.length; i++) {\n      allWords.push(...allTracks[i].components);\n    }\n    return allWords;\n  }\n}\n","\n\n/**\n * Return a year to.. collection.\n * @param corpus\n * @param countFunction\n * @returns {{}}\n */\nexport function getYearsToCollection(corpus, countFunction) {\n  let allTracks = corpus.allTracks();\n  let yearCollection = {};\n  for (let i = 0; i < allTracks.length; i++) {\n    const track = allTracks[i];\n    const year = track.releaseYear;\n    if (yearCollection[year]) {\n      yearCollection[year] = yearCollection[year] + countFunction(track);\n    } else {\n      yearCollection[year] = countFunction(track);\n    }\n  }\n  return yearCollection;\n}\n\n/**\n * Returns the relative version of the given year to.. collection.\n * @param corpus\n * @param listPerYear\n * @returns {{}}\n */\nexport function getYearsToCollectionRelative(corpus, listPerYear) {\n  let lyricsPerYear = corpus.getYearsToTrackNumbers();\n  let yearCollection = {};\n  for (const yearKey in lyricsPerYear) {\n    if (lyricsPerYear.hasOwnProperty(yearKey)) {\n      let lyricsCount = lyricsPerYear[yearKey];\n      let wordsCount = listPerYear[yearKey];\n      yearCollection[yearKey] = wordsCount / lyricsCount;\n    }\n  }\n  return yearCollection;\n}\n\n/**\n *\n * @param corpus\n * @param tracks\n * @returns {[]}\n */\nexport function createYearDataForTracks(corpus, tracks) {\n  let yearToAmount = {};\n  let includedYears = [];\n  let lyricsPerYear = corpus.getYearsToTrackNumbers();\n\n  for (let i = 0; i < tracks.length; i++) {\n\n    const track = tracks[i];\n    const year = track.releaseYear;\n\n    if (yearToAmount[year]) {\n      yearToAmount[year] = yearToAmount[year] + 1;\n    } else {\n      includedYears.push(year);\n      yearToAmount[year] = 1;\n    }\n  }\n\n  includedYears = includedYears.sort();\n\n  let items = [];\n  for (let i = 0; i < includedYears.length; i++) {\n    const year = includedYears[i];\n    const yearTotal = lyricsPerYear[year];\n    const value = yearToAmount[year] || 0;\n    const relativeValue = value / yearTotal;\n\n    items.push({\n      date: year,\n      dateTotal: yearTotal || 0,\n      value: value,\n      relativeDateValue: relativeValue\n    });\n  }\n  return items;\n}\n","\n/**\n * Returns a departement to.. collection.\n *\n * @param corpus\n * @param countFunction\n * @returns {{}}\n */\nexport function getDepartmentsToCollection(corpus, countFunction) {\n  let departmentDatasets = [];\n  let allTracks = corpus.allTracks();\n  allTracks.forEach(function (track) {\n    let location = track.departmentNumber;\n    let departmentName = track.departmentName;\n    let dataset = departmentDatasets.find(dataset => dataset.location === location);\n    if (dataset) {\n      dataset.value += countFunction(track);\n    } else {\n      departmentDatasets.push({\n        location: location,\n        locationName: departmentName,\n        value: countFunction(track)\n      });\n    }\n  });\n  return departmentDatasets;\n}\n\n/**\n * Returns the relative version of the given department to.. collection.\n *\n * @param corpus\n * @param listPerDepartement\n * @returns {{}}\n */\nexport function getDepartmentsToCollectionRelative(corpus, listPerDepartement) {\n  let tracksPerDepartment = corpus.getDepartmentsToTracks();\n  for (let index = 0; index < listPerDepartement.length; index++) {\n    let item = listPerDepartement[index];\n    let location = item.location;\n    let trackCount = tracksPerDepartment.find(item => item.location === location);\n    let itemCount = listPerDepartement.find(item => item.location === location);\n    item.value = itemCount.value / trackCount.value;\n  }\n\n  return listPerDepartement;\n}\n\n\n/**\n *\n * @param corpus\n * @param tracks\n * @returns {[]}\n */\nexport function createDepartmentDataForTracks(corpus, tracks) {\n  let locationToAmount = {};\n  let departmentNumbers = [];\n  let tracksPerDepartement = corpus.getDepartmentsToTracks();\n\n  for (let i = 0; i < tracks.length; i++) {\n    const track = tracks[i];\n    const departmentNumber = track.departmentNumber;\n\n    if (!departmentNumbers.includes(departmentNumber)) {\n      departmentNumbers.push(departmentNumber);\n    }\n\n    if (locationToAmount[departmentNumber]) {\n      locationToAmount[departmentNumber] = locationToAmount[departmentNumber] + 1;\n    } else {\n      locationToAmount[departmentNumber] = 1;\n    }\n  }\n\n  departmentNumbers = departmentNumbers.sort();\n\n  let items = [];\n  for (let i = 0; i < departmentNumbers.length; i++) {\n    const departmentNumber = departmentNumbers[i];\n    const value = locationToAmount[departmentNumber] || 0;\n    items.push({\n      location: departmentNumber,\n      value: value,\n      relativeLocationValue: value\n    });\n  }\n\n  return items;\n}\n","import {Track} from \"../model/track\";\n\n/**\n *\n * @param corpus\n * @param searchQuery\n * @param firstYear\n * @param lastYear\n * @param sensitivity\n * @param absolute\n * @returns {[]}\n */\nexport function internalSearch(corpus, searchQuery, firstYear, lastYear, sensitivity, absolute) {\n  let theFirstYear = firstYear || corpus.getEarliestYear();\n  let theLastYear = lastYear || corpus.getLatestYear();\n  let theSensitivity = sensitivity || 'case-insensitive';\n  let theAbsolute = absolute || 'relative';\n\n  // clean search query\n  let groups = searchQuery.split(';').map(value => value.trim());\n  groups = groups.map(group => group.split(',').map(word => word.trim()).join(','));\n  groups = groups.map(group => group.trim());\n\n  let datasets = [];\n  let tracksObject = {};\n  for (let i = 0; i < groups.length; i++) {\n\n    let group = groups[i];\n    let words = group.split(',').map(value => value.trim());\n    let stack = words.join(\", \");\n\n    for (let j = 0; j < words.length; j++) {\n      let searchWord = words[j];\n      let dataset = datasetFor(\n        corpus,\n        searchWord,\n        stack,\n        theFirstYear,\n        theLastYear,\n        theSensitivity,\n        theAbsolute\n      );\n\n      tracksObject[searchWord] = dataset.tracks;\n      dataset.tracks = null;\n      datasets.push(dataset);\n    }\n  }\n  datasets.tracks = tracksObject;\n  return datasets;\n}\n\n/**\n *\n * @param corpus\n * @param searchText\n * @param stack\n * @param firstYear\n * @param lastYear\n * @param sensitivity\n * @param absolute\n * @returns {{stack: *, data: *[], label}}\n */\nfunction datasetFor(corpus, searchText, stack, firstYear, lastYear, sensitivity, absolute) {\n  let tracks = tracksForWord(corpus, searchText, sensitivity);\n  tracks = tracks.filter(function (track) {\n    return track.releaseYear >= firstYear\n      && track.releaseYear <= lastYear;\n  });\n\n  let chartData = createYearAndDepartmentsDataForTracks(\n    corpus,\n    tracks,\n    firstYear,\n    lastYear,\n    sensitivity,\n    absolute\n  );\n\n  return {\n    label: searchText,\n    stack: stack || searchText,\n    tracks: tracks,\n    data: chartData\n  };\n}\n\n/**\n * Returns an array containing all tracks which contains the given word.\n *\n * @param corpus\n * @param word\n * @param sensitivity\n * @returns {[]}\n */\nexport function tracksForWord(corpus, word, sensitivity = 'case-sensitive') {\n  let tracks = [];\n  const allTracks = corpus.allTracks();\n\n  if (sensitivity === 'case-sensitive') {\n    for (let i = 0; i < allTracks.length; i++) {\n      if (allTracks[i].components.indexOf(word) !== -1) {\n        tracks.push(new Track(allTracks[i]));\n      }\n    }\n  }\n  else if (sensitivity === 'case-insensitive') {\n    word = word.toLowerCase();\n    for (let i = 0; i < allTracks.length; i++) {\n      if (allTracks[i].componentsLowercased.indexOf(word) !== -1) {\n        tracks.push(new Track(allTracks[i]));\n      }\n    }\n  }\n\n  return tracks;\n}\n\n\n/**\n *\n * @param corpus\n * @param tracks\n * @param firstYear\n * @param lastYear\n * @param sensitivity\n * @param absolute\n * @returns {[]}\n */\nexport function createYearAndDepartmentsDataForTracks(corpus, tracks, firstYear, lastYear, sensitivity, absolute) {\n  let items = [];\n  let yearsToTrackNumbers = corpus.getYearsToTrackNumbers();\n  let tracksPerDepartement = corpus.getDepartmentsToTracks();\n  let theFirstYear = firstYear || corpus.getEarliestYear();\n  let theLastYear = lastYear || corpus.getLatestYear();\n  let isAbsolute = absolute === 'absolute';\n\n  for (let index = 0; index < tracks.length; index++) {\n    let track = tracks[index];\n    let year = track.releaseYear;\n    let department = track.departmentNumber;\n\n    let entry = items.find(function (item) {\n      return item.location === department && item.date === year;\n    });\n\n    if (entry) {\n      entry.value += 1;\n    } else {\n      let departmentEntry = tracksPerDepartement.find(entry => entry.location === department);\n      let relative = 1 / yearsToTrackNumbers[year];\n      items.push({\n        location: department,\n        date: year,\n        value: 1,\n        relativeValue: relative,\n        dateTotal: yearsToTrackNumbers[year],\n        locationTotal: departmentEntry.value,\n      });\n    }\n\n    for (let year = theFirstYear; year <= theLastYear; year++) {\n      if (items.find(item => item.date === theLastYear)) continue;\n      items.push({\n        date: year,\n        value: 0,\n        dateTotal: yearsToTrackNumbers[year]\n      });\n    }\n  }\n\n  if (!isAbsolute) {\n    for (let index = 0; index < items.length; index++) {\n      let item = items[index];\n      item.value = item.value / item.dateTotal\n    }\n  }\n\n  return items;\n}\n","\nexport function tracksForYears(corpus, years) {\n\n}\n","/**\n *\n * @param corpus\n * @param locations\n * @returns {[]}\n */\nexport function artistsForLocations(corpus, locations) {\n  let artists = corpus.artists;\n  let includedArtists = [];\n  for (let index = 0; index < artists.length; index++) {\n    let artist = artists[index];\n    if (locations.includes(String(artist.departmentNo))) {\n      includedArtists.push(artist);\n    }\n  }\n  return artistsDatasets(includedArtists);\n}\n\n/**\n *\n * @param artists\n * @returns {[]}\n */\nexport function artistsDatasets(artists) {\n  let datasets = [];\n  for (let index = 0; index < artists.length; index++) {\n    let artist = artists[index];\n    let tracks = artist.allTracks();\n    let data = [];\n    for (let trackIndex = 0; trackIndex < tracks.length; trackIndex++) {\n      let track = tracks[trackIndex];\n      data.push({\n        date: track.releaseYear,\n        location: artist.departmentNo,\n        value: 1,\n      })\n    }\n    datasets.push({\n      label: artist.name,\n      stack: artist.name,\n      data: data\n    })\n  }\n  return datasets;\n}\n","import {Artist} from \"./artist\";\nimport {\n  getYearsToCollection,\n  getYearsToCollectionRelative\n} from \"../access/year-relations\";\nimport {\n  getDepartmentsToCollection,\n  getDepartmentsToCollectionRelative\n} from \"../access/department-relations\";\nimport {\n  internalSearch\n} from \"../access/search\";\nimport {tracksForYears} from \"../access/tracks-access\";\nimport {artistsForLocations} from \"../access/artists-for-locations\";\n\n/**\n *\n * @class Corpus\n */\nexport class Corpus {\n\n  /**\n   * Creates a new instance of Corpus.\n   *\n   * @param parsedCorpus\n   */\n  constructor(parsedCorpus) {\n    this.artists = [];\n    this.initialize(parsedCorpus);\n  }\n\n  /**\n   *\n   * @param parsedCorpus\n   */\n  initialize(parsedCorpus) {\n    console.log(`frc parse corpus`);\n    for (let i = 0; i < parsedCorpus.length; i++) {\n      const artistJSON = parsedCorpus[i];\n      const artist = new Artist(artistJSON);\n      this.artists.push(artist);\n    }\n    console.log(`frc loaded corpus`);\n  }\n\n  /**\n   * Returns an array containing all female artists.\n   *\n   * @returns {*[]}\n   */\n  femaleArtists() {\n    return this.artists.filter(artist => artist.sex === \"F\");\n  }\n\n  /**\n   * Returns an array containing all male artists.\n   *\n   * @returns {*[]}\n   */\n  maleArtists() {\n    return this.artists.filter(artist => artist.sex === \"M\");\n  }\n\n  /**\n   * Returns an array containing all group artists.\n   *\n   * @returns {*[]}\n   */\n  groupArtists() {\n    return this.artists.filter(artist => artist.group === \"G\");\n  }\n\n  /**\n   * Returns an array with all tracks of the corpus.\n   *\n   * @returns {[]}\n   */\n  allTracks() {\n    let allTracks = [];\n    for (let i = 0; i < this.artists.length; i++) {\n      allTracks.push(...this.artists[i].allTracks());\n    }\n    return allTracks;\n  }\n\n  /**\n   * Returns an array of all words in the corpus.\n   *\n   * @returns {[]}\n   */\n  allWords() {\n    let allWords = [];\n    for (let i = 0; i < this.artists.length; i++) {\n      let wordsOfArtist = this.artists[i].allWords();\n      for (let i = 0; i < wordsOfArtist.length; i++) {\n        allWords.push(wordsOfArtist[i]);\n      }\n    }\n    return allWords;\n  }\n\n  /**\n   * Returns an array containing all albums in the corpus.\n   *\n   * @returns {[]}\n   */\n  allAlbums() {\n    let allAlbums = [];\n    for (let i = 0; i < this.artists.length; i++) {\n      allAlbums.push(...this.artists[i].albums);\n    }\n    return allAlbums;\n  }\n\n  /**\n   * Returns an array containing all tracks without an album.\n   * @returns {[]}\n   */\n  allTracksWithoutAlbum() {\n    let tracksWithoutAlbum = [];\n    for (let i = 0; i < this.artists.length; i++) {\n      tracksWithoutAlbum.push(...this.artists[i].tracks);\n    }\n    return tracksWithoutAlbum;\n  }\n\n  /**\n   * Returns the earliest year in the corpus.\n   * @returns {*}\n   */\n  getEarliestYear() {\n    let allTracks = this.allTracks();\n    let firstYear = allTracks.find(item => item !== undefined).releaseYear;\n    return this.allTracks().reduce((current, next) => current < next.releaseYear ? current : next.releaseYear, firstYear);\n  }\n\n  /**\n   * Returns the latest year of the corpus.\n   * @returns {*}\n   */\n  getLatestYear() {\n    let allTracks = this.allTracks();\n    let lastYear = allTracks.find(item => item !== undefined).releaseYear;\n    return this.allTracks()\n      .reduce((current, next) => current > next.releaseYear ? current : next.releaseYear, lastYear);\n  }\n\n  getDateLabels() {\n    let firstDate = this.getEarliestYear();\n    let lastDate = this.getLatestYear();\n    let range = lastDate - firstDate + 1;\n    return Array(range).fill(0).map((e, i) => i + firstDate);\n  }\n\n  /**\n   * Returns a year to track collection.\n   *\n   * @returns {{}}\n   */\n  getYearsToTrackNumbers() {\n    return getYearsToCollection(this, () => 1);\n  }\n\n  /**\n   * Returns a year to word collection.\n   * @returns {{}}\n   */\n  getYearsToWords() {\n    return getYearsToCollection(this, (track) => track.components.length);\n  }\n\n  /**\n   * Returns a year to words collection with relative values.\n   * @returns {{}}\n   */\n  getYearsToWordsRelative() {\n    return getYearsToCollectionRelative(this, this.getYearsToWords());\n  };\n\n  /**\n   * Returns a year to types collection.\n   *\n   * @returns {{}}\n   */\n  getYearsToTypes() {\n    return getYearsToCollection(this, (track) => track.types.length);\n  };\n\n  /**\n   * Returns a year to types collection with relative values.\n   * @returns {{}}\n   */\n  getYearsToTypesRelative() {\n    return getYearsToCollectionRelative(this, this.getYearsToTypes());\n  };\n\n  /**\n   * Returns a departments to year collection.\n   *\n   * @returns {{}}\n   */\n  getDepartmentsToTracks() {\n    return getDepartmentsToCollection(this, () => 1);\n  }\n\n  /**\n   * Returns a departmen to word collection.\n   *\n   * @returns {{}}\n   */\n  getDepartmentsToWords() {\n    return getDepartmentsToCollection(this, (track) => track.components.length);\n  }\n\n  /**\n   * Returns a year to words collection with relative values.\n   *\n   * @returns {{}}\n   */\n  getDepartmentsToWordsRelative() {\n    return getDepartmentsToCollectionRelative(this, this.getDepartmentsToWords());\n  };\n\n  /**\n   * Returns a year to types collection.\n   *\n   * @returns {{}}\n   */\n  getDepartmentsToTypes() {\n    return getDepartmentsToCollection(this, (track) => track.types.length);\n  };\n\n  /**\n   * Returns a year to types collection with relative values.\n   *\n   * @returns {{}}\n   */\n  getDepartmentsToTypesRelative() {\n    return getDepartmentsToCollectionRelative(this, this.getDepartmentsToTypes());\n  };\n\n  /**\n   *\n   * @param years\n   * @returns {*}\n   */\n  getTracksForYears(years) {\n    return tracksForYears(this, years);\n  }\n\n  /**\n   *\n   * @param locations\n   * @returns {*}\n   */\n  getArtistsForLocations(locations) {\n    return artistsForLocations(this, locations);\n  }\n\n  /**\n   *\n   * @param searchQuery\n   * @param firstYear\n   * @param lastYear\n   * @param sensitivity\n   * @param absolute\n   * @returns {*[]}\n   */\n  search(searchQuery, firstYear, lastYear, sensitivity, absolute) {\n    return internalSearch(this, searchQuery, firstYear, lastYear, sensitivity, absolute);\n  }\n}\n"],"names":[],"mappings":";;;;;;;;;AAIO,MAAM,KAAK,CAAC;AAMnB,EAAE,WAAW,CAAC,SAAS,EAAE;AAEzB,IAAI,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC,KAAK,CAAC;AACjC,IAAI,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC,SAAS,CAAC;AACzC,IAAI,IAAI,CAAC,WAAW,GAAG,SAAS,CAAC,WAAW,CAAC;AAC7C,IAAI,IAAI,CAAC,WAAW,GAAG,SAAS,CAAC,WAAW,CAAC;AAC7C,IAAI,IAAI,CAAC,gBAAgB,GAAG,SAAS,CAAC,gBAAgB,CAAC;AACvD,IAAI,IAAI,CAAC,cAAc,GAAG,SAAS,CAAC,cAAc,CAAC;AACnD,IAAI,IAAI,CAAC,EAAE,GAAG,SAAS,CAAC,EAAE,CAAC;AAC3B,IAAI,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC,QAAQ,CAAC;AACvC,IAAI,IAAI,CAAC,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC;AACnC,IAAI,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC,OAAO,CAAC;AAErC,IAAI,IAAI,SAAS,CAAC,OAAO,EAAE;AAC3B,MAAM,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC,OAAO;AACzC,SAAS,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;AAC3B,SAAS,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC;AAC5B,SAAS,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC;AAC5B,SAAS,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC;AAC5B,SAAS,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC;AAC5B,SAAS,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC;AAC5B,SAAS,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;AAC3B,SAAS,KAAK,CAAC,GAAG,CAAC;AACnB,SAAS,MAAM,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;AAC3C,KAAK,MAAM,IAAI,SAAS,CAAC,UAAU,EAAE;AACrC,MAAM,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC,UAAU,CAAC;AAC7C,KAAK;AAEL,IAAI,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;AAEhF,IAAI,IAAI,QAAQ,GAAG,IAAI,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;AAC5C,IAAI,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AACtC,GAAG;AACH;;ACtCO,MAAM,KAAK,CAAC;AAEnB,EAAE,WAAW,CAAC,SAAS,EAAE;AACzB,IAAI,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC,IAAI,CAAC;AAC/B,IAAI,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;AACrB,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACtD,MAAM,MAAM,SAAS,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;AAC5C,MAAM,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,SAAS,CAAC,CAAC;AACzC,MAAM,KAAK,CAAC,gBAAgB,GAAG,SAAS,CAAC,YAAY,CAAC;AACtD,MAAM,KAAK,CAAC,cAAc,GAAG,SAAS,CAAC,cAAc,CAAC;AACtD,MAAM,KAAK,CAAC,QAAQ,GAAG,SAAS,CAAC,QAAQ,CAAC;AAC1C,MAAM,KAAK,CAAC,MAAM,GAAG,SAAS,CAAC,IAAI,CAAC;AACpC,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAC9B,KAAK;AACL,GAAG;AACH;;ACdO,MAAM,MAAM,CAAC;AAEpB,EAAE,WAAW,CAAC,OAAO,EAAE;AACvB,IAAI,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;AAC7B,IAAI,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;AACrC,IAAI,IAAI,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC;AAC3B,IAAI,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;AAC/B,IAAI,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,IAAI,OAAO,CAAC,WAAW,CAAC;AAChE,IAAI,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC,YAAY,IAAI,OAAO,CAAC,aAAa,CAAC;AACtE,IAAI,IAAI,CAAC,cAAc,GAAG,CAAC,OAAO,CAAC,UAAU,IAAI,OAAO,CAAC,WAAW;AACpE,OAAO,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AACpB,OAAO,IAAI,EAAE;AACb,OAAO,WAAW,EAAE,CAAC;AAErB,IAAI,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;AACrB,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACpD,MAAM,MAAM,SAAS,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;AAC1C,MAAM,SAAS,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;AACjD,MAAM,SAAS,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC;AACrD,MAAM,SAAS,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;AAC5C,MAAM,SAAS,CAAC,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC;AACtC,MAAM,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,SAAS,CAAC,CAAC;AACzC,MAAM,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,IAAI,KAAK,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AACvE,MAAM,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,IAAI,KAAK,CAAC,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;AACjE,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAC9B,KAAK;AAEL,IAAI,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;AACrB,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACpD,MAAM,MAAM,SAAS,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;AAC1C,MAAM,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,SAAS,CAAC,CAAC;AACzC,MAAM,KAAK,CAAC,gBAAgB,GAAG,IAAI,CAAC,YAAY,CAAC;AACjD,MAAM,KAAK,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC;AACjD,MAAM,KAAK,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;AACxC,MAAM,KAAK,CAAC,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC;AAClC,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAC9B,KAAK;AACL,GAAG;AAEH,EAAE,SAAS,GAAG;AACd,IAAI,IAAI,MAAM,GAAG,EAAE,CAAC;AACpB,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACjD,MAAM,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;AACnC,MAAM,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACpD,QAAQ,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;AACrC,OAAO;AACP,KAAK;AAEL,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACjD,MAAM,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;AAClC,KAAK;AACL,IAAI,OAAO,MAAM,CAAC;AAClB,GAAG;AAEH,EAAE,QAAQ,GAAG;AACb,IAAI,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;AACvC,IAAI,IAAI,QAAQ,GAAG,EAAE,CAAC;AACtB,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAC/C,MAAM,QAAQ,CAAC,IAAI,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC;AAChD,KAAK;AACL,IAAI,OAAO,QAAQ,CAAC;AACpB,GAAG;AACH;;AC5DO,SAAS,oBAAoB,CAAC,MAAM,EAAE,aAAa,EAAE;AAC5D,EAAE,IAAI,SAAS,GAAG,MAAM,CAAC,SAAS,EAAE,CAAC;AACrC,EAAE,IAAI,cAAc,GAAG,EAAE,CAAC;AAC1B,EAAE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAC7C,IAAI,MAAM,KAAK,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;AAC/B,IAAI,MAAM,IAAI,GAAG,KAAK,CAAC,WAAW,CAAC;AACnC,IAAI,IAAI,cAAc,CAAC,IAAI,CAAC,EAAE;AAC9B,MAAM,cAAc,CAAC,IAAI,CAAC,GAAG,cAAc,CAAC,IAAI,CAAC,GAAG,aAAa,CAAC,KAAK,CAAC,CAAC;AACzE,KAAK,MAAM;AACX,MAAM,cAAc,CAAC,IAAI,CAAC,GAAG,aAAa,CAAC,KAAK,CAAC,CAAC;AAClD,KAAK;AACL,GAAG;AACH,EAAE,OAAO,cAAc,CAAC;AACxB,CAAC;AAQM,SAAS,4BAA4B,CAAC,MAAM,EAAE,WAAW,EAAE;AAClE,EAAE,IAAI,aAAa,GAAG,MAAM,CAAC,sBAAsB,EAAE,CAAC;AACtD,EAAE,IAAI,cAAc,GAAG,EAAE,CAAC;AAC1B,EAAE,KAAK,MAAM,OAAO,IAAI,aAAa,EAAE;AACvC,IAAI,IAAI,aAAa,CAAC,cAAc,CAAC,OAAO,CAAC,EAAE;AAC/C,MAAM,IAAI,WAAW,GAAG,aAAa,CAAC,OAAO,CAAC,CAAC;AAC/C,MAAM,IAAI,UAAU,GAAG,WAAW,CAAC,OAAO,CAAC,CAAC;AAC5C,MAAM,cAAc,CAAC,OAAO,CAAC,GAAG,UAAU,GAAG,WAAW,CAAC;AACzD,KAAK;AACL,GAAG;AACH,EAAE,OAAO,cAAc,CAAC;AACxB;;AChCO,SAAS,0BAA0B,CAAC,MAAM,EAAE,aAAa,EAAE;AAClE,EAAE,IAAI,kBAAkB,GAAG,EAAE,CAAC;AAC9B,EAAE,IAAI,SAAS,GAAG,MAAM,CAAC,SAAS,EAAE,CAAC;AACrC,EAAE,SAAS,CAAC,OAAO,CAAC,UAAU,KAAK,EAAE;AACrC,IAAI,IAAI,QAAQ,GAAG,KAAK,CAAC,gBAAgB,CAAC;AAC1C,IAAI,IAAI,cAAc,GAAG,KAAK,CAAC,cAAc,CAAC;AAC9C,IAAI,IAAI,OAAO,GAAG,kBAAkB,CAAC,IAAI,CAAC,OAAO,IAAI,OAAO,CAAC,QAAQ,KAAK,QAAQ,CAAC,CAAC;AACpF,IAAI,IAAI,OAAO,EAAE;AACjB,MAAM,OAAO,CAAC,KAAK,IAAI,aAAa,CAAC,KAAK,CAAC,CAAC;AAC5C,KAAK,MAAM;AACX,MAAM,kBAAkB,CAAC,IAAI,CAAC;AAC9B,QAAQ,QAAQ,EAAE,QAAQ;AAC1B,QAAQ,YAAY,EAAE,cAAc;AACpC,QAAQ,KAAK,EAAE,aAAa,CAAC,KAAK,CAAC;AACnC,OAAO,CAAC,CAAC;AACT,KAAK;AACL,GAAG,CAAC,CAAC;AACL,EAAE,OAAO,kBAAkB,CAAC;AAC5B,CAAC;AASM,SAAS,kCAAkC,CAAC,MAAM,EAAE,kBAAkB,EAAE;AAC/E,EAAE,IAAI,mBAAmB,GAAG,MAAM,CAAC,sBAAsB,EAAE,CAAC;AAC5D,EAAE,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,kBAAkB,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;AAClE,IAAI,IAAI,IAAI,GAAG,kBAAkB,CAAC,KAAK,CAAC,CAAC;AACzC,IAAI,IAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;AACjC,IAAI,IAAI,UAAU,GAAG,mBAAmB,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,QAAQ,KAAK,QAAQ,CAAC,CAAC;AAClF,IAAI,IAAI,SAAS,GAAG,kBAAkB,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,QAAQ,KAAK,QAAQ,CAAC,CAAC;AAChF,IAAI,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC,KAAK,GAAG,UAAU,CAAC,KAAK,CAAC;AACpD,GAAG;AAEH,EAAE,OAAO,kBAAkB,CAAC;AAC5B;;AClCO,SAAS,cAAc,CAAC,MAAM,EAAE,WAAW,EAAE,SAAS,EAAE,QAAQ,EAAE,WAAW,EAAE,QAAQ,EAAE;AAChG,EAAE,IAAI,YAAY,GAAG,SAAS,IAAI,MAAM,CAAC,eAAe,EAAE,CAAC;AAC3D,EAAE,IAAI,WAAW,GAAG,QAAQ,IAAI,MAAM,CAAC,aAAa,EAAE,CAAC;AACvD,EAAE,IAAI,cAAc,GAAG,WAAW,IAAI,kBAAkB,CAAC;AACzD,EAAE,IAAI,WAAW,GAAG,QAAQ,IAAI,UAAU,CAAC;AAG3C,EAAE,IAAI,MAAM,GAAG,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC;AACjE,EAAE,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,KAAK,IAAI,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;AACpF,EAAE,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC;AAE7C,EAAE,IAAI,QAAQ,GAAG,EAAE,CAAC;AACpB,EAAE,IAAI,YAAY,GAAG,EAAE,CAAC;AACxB,EAAE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAE1C,IAAI,IAAI,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;AAC1B,IAAI,IAAI,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC;AAC5D,IAAI,IAAI,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAEjC,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAC3C,MAAM,IAAI,UAAU,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;AAChC,MAAM,IAAI,OAAO,GAAG,UAAU;AAC9B,QAAQ,MAAM;AACd,QAAQ,UAAU;AAClB,QAAQ,KAAK;AACb,QAAQ,YAAY;AACpB,QAAQ,WAAW;AACnB,QAAQ,cAAc;AACtB,QAAQ,WAAW;AACnB,OAAO,CAAC;AAER,MAAM,YAAY,CAAC,UAAU,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC;AAChD,MAAM,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC;AAC5B,MAAM,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AAC7B,KAAK;AACL,GAAG;AACH,EAAE,QAAQ,CAAC,MAAM,GAAG,YAAY,CAAC;AACjC,EAAE,OAAO,QAAQ,CAAC;AAClB,CAAC;AAaD,SAAS,UAAU,CAAC,MAAM,EAAE,UAAU,EAAE,KAAK,EAAE,SAAS,EAAE,QAAQ,EAAE,WAAW,EAAE,QAAQ,EAAE;AAC3F,EAAE,IAAI,MAAM,GAAG,aAAa,CAAC,MAAM,EAAE,UAAU,EAAE,WAAW,CAAC,CAAC;AAC9D,EAAE,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,UAAU,KAAK,EAAE;AAC1C,IAAI,OAAO,KAAK,CAAC,WAAW,IAAI,SAAS;AACzC,SAAS,KAAK,CAAC,WAAW,IAAI,QAAQ,CAAC;AACvC,GAAG,CAAC,CAAC;AAEL,EAAE,IAAI,SAAS,GAAG,qCAAqC;AACvD,IAAI,MAAM;AACV,IAAI,MAAM;AACV,IAAI,SAAS;AACb,IAAI,QAAQ;AACZ,IAAI,WAAW;AACf,IAAI,QAAQ;AACZ,GAAG,CAAC;AAEJ,EAAE,OAAO;AACT,IAAI,KAAK,EAAE,UAAU;AACrB,IAAI,KAAK,EAAE,KAAK,IAAI,UAAU;AAC9B,IAAI,MAAM,EAAE,MAAM;AAClB,IAAI,IAAI,EAAE,SAAS;AACnB,GAAG,CAAC;AACJ,CAAC;AAUM,SAAS,aAAa,CAAC,MAAM,EAAE,IAAI,EAAE,WAAW,GAAG,gBAAgB,EAAE;AAC5E,EAAE,IAAI,MAAM,GAAG,EAAE,CAAC;AAClB,EAAE,MAAM,SAAS,GAAG,MAAM,CAAC,SAAS,EAAE,CAAC;AAEvC,EAAE,IAAI,WAAW,KAAK,gBAAgB,EAAE;AACxC,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAC/C,MAAM,IAAI,SAAS,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;AACxD,QAAQ,MAAM,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7C,OAAO;AACP,KAAK;AACL,GAAG;AACH,OAAO,IAAI,WAAW,KAAK,kBAAkB,EAAE;AAC/C,IAAI,IAAI,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;AAC9B,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAC/C,MAAM,IAAI,SAAS,CAAC,CAAC,CAAC,CAAC,oBAAoB,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;AAClE,QAAQ,MAAM,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7C,OAAO;AACP,KAAK;AACL,GAAG;AAEH,EAAE,OAAO,MAAM,CAAC;AAChB,CAAC;AAaM,SAAS,qCAAqC,CAAC,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,QAAQ,EAAE,WAAW,EAAE,QAAQ,EAAE;AAClH,EAAE,IAAI,KAAK,GAAG,EAAE,CAAC;AACjB,EAAE,IAAI,mBAAmB,GAAG,MAAM,CAAC,sBAAsB,EAAE,CAAC;AAC5D,EAAE,IAAI,oBAAoB,GAAG,MAAM,CAAC,sBAAsB,EAAE,CAAC;AAC7D,EAAE,IAAI,YAAY,GAAG,SAAS,IAAI,MAAM,CAAC,eAAe,EAAE,CAAC;AAC3D,EAAE,IAAI,WAAW,GAAG,QAAQ,IAAI,MAAM,CAAC,aAAa,EAAE,CAAC;AACvD,EAAE,IAAI,UAAU,GAAG,QAAQ,KAAK,UAAU,CAAC;AAE3C,EAAE,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,MAAM,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;AACtD,IAAI,IAAI,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;AAC9B,IAAI,IAAI,IAAI,GAAG,KAAK,CAAC,WAAW,CAAC;AACjC,IAAI,IAAI,UAAU,GAAG,KAAK,CAAC,gBAAgB,CAAC;AAE5C,IAAI,IAAI,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,UAAU,IAAI,EAAE;AAC3C,MAAM,OAAO,IAAI,CAAC,QAAQ,KAAK,UAAU,IAAI,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC;AAChE,KAAK,CAAC,CAAC;AAEP,IAAI,IAAI,KAAK,EAAE;AACf,MAAM,KAAK,CAAC,KAAK,IAAI,CAAC,CAAC;AACvB,KAAK,MAAM;AACX,MAAM,IAAI,eAAe,GAAG,oBAAoB,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,QAAQ,KAAK,UAAU,CAAC,CAAC;AAC9F,MAAM,IAAI,QAAQ,GAAG,CAAC,GAAG,mBAAmB,CAAC,IAAI,CAAC,CAAC;AACnD,MAAM,KAAK,CAAC,IAAI,CAAC;AACjB,QAAQ,QAAQ,EAAE,UAAU;AAC5B,QAAQ,IAAI,EAAE,IAAI;AAClB,QAAQ,KAAK,EAAE,CAAC;AAChB,QAAQ,aAAa,EAAE,QAAQ;AAC/B,QAAQ,SAAS,EAAE,mBAAmB,CAAC,IAAI,CAAC;AAC5C,QAAQ,aAAa,EAAE,eAAe,CAAC,KAAK;AAC5C,OAAO,CAAC,CAAC;AACT,KAAK;AAEL,IAAI,KAAK,IAAI,IAAI,GAAG,YAAY,EAAE,IAAI,IAAI,WAAW,EAAE,IAAI,EAAE,EAAE;AAC/D,MAAM,IAAI,KAAK,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,KAAK,WAAW,CAAC,EAAE,SAAS;AAClE,MAAM,KAAK,CAAC,IAAI,CAAC;AACjB,QAAQ,IAAI,EAAE,IAAI;AAClB,QAAQ,KAAK,EAAE,CAAC;AAChB,QAAQ,SAAS,EAAE,mBAAmB,CAAC,IAAI,CAAC;AAC5C,OAAO,CAAC,CAAC;AACT,KAAK;AACL,GAAG;AAEH,EAAE,IAAI,CAAC,UAAU,EAAE;AACnB,IAAI,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,KAAK,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;AACvD,MAAM,IAAI,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC;AAC9B,MAAM,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,UAAS;AAC9C,KAAK;AACL,GAAG;AAEH,EAAE,OAAO,KAAK,CAAC;AACf;;AClLO,SAAS,cAAc,CAAC,MAAM,EAAE,KAAK,EAAE;AAE9C;;ACGO,SAAS,mBAAmB,CAAC,MAAM,EAAE,SAAS,EAAE;AACvD,EAAE,IAAI,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;AAC/B,EAAE,IAAI,eAAe,GAAG,EAAE,CAAC;AAC3B,EAAE,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,OAAO,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;AACvD,IAAI,IAAI,MAAM,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC;AAChC,IAAI,IAAI,SAAS,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,EAAE;AACzD,MAAM,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AACnC,KAAK;AACL,GAAG;AACH,EAAE,OAAO,eAAe,CAAC,eAAe,CAAC,CAAC;AAC1C,CAAC;AAOM,SAAS,eAAe,CAAC,OAAO,EAAE;AACzC,EAAE,IAAI,QAAQ,GAAG,EAAE,CAAC;AACpB,EAAE,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,OAAO,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;AACvD,IAAI,IAAI,MAAM,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC;AAChC,IAAI,IAAI,MAAM,GAAG,MAAM,CAAC,SAAS,EAAE,CAAC;AACpC,IAAI,IAAI,IAAI,GAAG,EAAE,CAAC;AAClB,IAAI,KAAK,IAAI,UAAU,GAAG,CAAC,EAAE,UAAU,GAAG,MAAM,CAAC,MAAM,EAAE,UAAU,EAAE,EAAE;AACvE,MAAM,IAAI,KAAK,GAAG,MAAM,CAAC,UAAU,CAAC,CAAC;AACrC,MAAM,IAAI,CAAC,IAAI,CAAC;AAChB,QAAQ,IAAI,EAAE,KAAK,CAAC,WAAW;AAC/B,QAAQ,QAAQ,EAAE,MAAM,CAAC,YAAY;AACrC,QAAQ,KAAK,EAAE,CAAC;AAChB,OAAO,EAAC;AACR,KAAK;AACL,IAAI,QAAQ,CAAC,IAAI,CAAC;AAClB,MAAM,KAAK,EAAE,MAAM,CAAC,IAAI;AACxB,MAAM,KAAK,EAAE,MAAM,CAAC,IAAI;AACxB,MAAM,IAAI,EAAE,IAAI;AAChB,KAAK,EAAC;AACN,GAAG;AACH,EAAE,OAAO,QAAQ,CAAC;AAClB;;ACzBO,MAAM,MAAM,CAAC;AAOpB,EAAE,WAAW,CAAC,YAAY,EAAE;AAC5B,IAAI,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;AACtB,IAAI,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;AAClC,GAAG;AAMH,EAAE,UAAU,CAAC,YAAY,EAAE;AAC3B,IAAI,OAAO,CAAC,GAAG,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC;AACpC,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,YAAY,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAClD,MAAM,MAAM,UAAU,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;AACzC,MAAM,MAAM,MAAM,GAAG,IAAI,MAAM,CAAC,UAAU,CAAC,CAAC;AAC5C,MAAM,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AAChC,KAAK;AACL,IAAI,OAAO,CAAC,GAAG,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC;AACrC,GAAG;AAOH,EAAE,aAAa,GAAG;AAClB,IAAI,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC;AAC7D,GAAG;AAOH,EAAE,WAAW,GAAG;AAChB,IAAI,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC;AAC7D,GAAG;AAOH,EAAE,YAAY,GAAG;AACjB,IAAI,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,KAAK,KAAK,GAAG,CAAC,CAAC;AAC/D,GAAG;AAOH,EAAE,SAAS,GAAG;AACd,IAAI,IAAI,SAAS,GAAG,EAAE,CAAC;AACvB,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAClD,MAAM,SAAS,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC,CAAC;AACrD,KAAK;AACL,IAAI,OAAO,SAAS,CAAC;AACrB,GAAG;AAOH,EAAE,QAAQ,GAAG;AACb,IAAI,IAAI,QAAQ,GAAG,EAAE,CAAC;AACtB,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAClD,MAAM,IAAI,aAAa,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;AACrD,MAAM,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACrD,QAAQ,QAAQ,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC;AACxC,OAAO;AACP,KAAK;AACL,IAAI,OAAO,QAAQ,CAAC;AACpB,GAAG;AAOH,EAAE,SAAS,GAAG;AACd,IAAI,IAAI,SAAS,GAAG,EAAE,CAAC;AACvB,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAClD,MAAM,SAAS,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;AAChD,KAAK;AACL,IAAI,OAAO,SAAS,CAAC;AACrB,GAAG;AAMH,EAAE,qBAAqB,GAAG;AAC1B,IAAI,IAAI,kBAAkB,GAAG,EAAE,CAAC;AAChC,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAClD,MAAM,kBAAkB,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;AACzD,KAAK;AACL,IAAI,OAAO,kBAAkB,CAAC;AAC9B,GAAG;AAMH,EAAE,eAAe,GAAG;AACpB,IAAI,IAAI,SAAS,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;AACrC,IAAI,IAAI,SAAS,GAAG,SAAS,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,KAAK,SAAS,CAAC,CAAC,WAAW,CAAC;AAC3E,IAAI,OAAO,IAAI,CAAC,SAAS,EAAE,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,IAAI,KAAK,OAAO,GAAG,IAAI,CAAC,WAAW,GAAG,OAAO,GAAG,IAAI,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;AAC1H,GAAG;AAMH,EAAE,aAAa,GAAG;AAClB,IAAI,IAAI,SAAS,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;AACrC,IAAI,IAAI,QAAQ,GAAG,SAAS,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,KAAK,SAAS,CAAC,CAAC,WAAW,CAAC;AAC1E,IAAI,OAAO,IAAI,CAAC,SAAS,EAAE;AAC3B,OAAO,MAAM,CAAC,CAAC,OAAO,EAAE,IAAI,KAAK,OAAO,GAAG,IAAI,CAAC,WAAW,GAAG,OAAO,GAAG,IAAI,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;AACpG,GAAG;AAEH,EAAE,aAAa,GAAG;AAClB,IAAI,IAAI,SAAS,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;AAC3C,IAAI,IAAI,QAAQ,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;AACxC,IAAI,IAAI,KAAK,GAAG,QAAQ,GAAG,SAAS,GAAG,CAAC,CAAC;AACzC,IAAI,OAAO,KAAK,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,SAAS,CAAC,CAAC;AAC7D,GAAG;AAOH,EAAE,sBAAsB,GAAG;AAC3B,IAAI,OAAO,oBAAoB,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC;AAC/C,GAAG;AAMH,EAAE,eAAe,GAAG;AACpB,IAAI,OAAO,oBAAoB,CAAC,IAAI,EAAE,CAAC,KAAK,KAAK,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;AAC1E,GAAG;AAMH,EAAE,uBAAuB,GAAG;AAC5B,IAAI,OAAO,4BAA4B,CAAC,IAAI,EAAE,IAAI,CAAC,eAAe,EAAE,CAAC,CAAC;AACtE,GAAG;AAOH,EAAE,eAAe,GAAG;AACpB,IAAI,OAAO,oBAAoB,CAAC,IAAI,EAAE,CAAC,KAAK,KAAK,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;AACrE,GAAG;AAMH,EAAE,uBAAuB,GAAG;AAC5B,IAAI,OAAO,4BAA4B,CAAC,IAAI,EAAE,IAAI,CAAC,eAAe,EAAE,CAAC,CAAC;AACtE,GAAG;AAOH,EAAE,sBAAsB,GAAG;AAC3B,IAAI,OAAO,0BAA0B,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC;AACrD,GAAG;AAOH,EAAE,qBAAqB,GAAG;AAC1B,IAAI,OAAO,0BAA0B,CAAC,IAAI,EAAE,CAAC,KAAK,KAAK,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;AAChF,GAAG;AAOH,EAAE,6BAA6B,GAAG;AAClC,IAAI,OAAO,kCAAkC,CAAC,IAAI,EAAE,IAAI,CAAC,qBAAqB,EAAE,CAAC,CAAC;AAClF,GAAG;AAOH,EAAE,qBAAqB,GAAG;AAC1B,IAAI,OAAO,0BAA0B,CAAC,IAAI,EAAE,CAAC,KAAK,KAAK,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;AAC3E,GAAG;AAOH,EAAE,6BAA6B,GAAG;AAClC,IAAI,OAAO,kCAAkC,CAAC,IAAI,EAAE,IAAI,CAAC,qBAAqB,EAAE,CAAC,CAAC;AAClF,GAAG;AAOH,EAAE,iBAAiB,CAAC,KAAK,EAAE;AAC3B,IAAI,OAAO,cAAc,CAAY,CAAC,CAAC;AACvC,GAAG;AAOH,EAAE,sBAAsB,CAAC,SAAS,EAAE;AACpC,IAAI,OAAO,mBAAmB,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;AAChD,GAAG;AAWH,EAAE,MAAM,CAAC,WAAW,EAAE,SAAS,EAAE,QAAQ,EAAE,WAAW,EAAE,QAAQ,EAAE;AAClE,IAAI,OAAO,cAAc,CAAC,IAAI,EAAE,WAAW,EAAE,SAAS,EAAE,QAAQ,EAAE,WAAW,EAAE,QAAQ,CAAC,CAAC;AACzF,GAAG;AACH;;;;;;;;"}