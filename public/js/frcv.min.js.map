{"version":3,"file":"frcv.min.js","sources":["../../src/track.js","../../src/album.js","../../src/artist.js","../../src/corpus.js","../../src/delegate.js"],"sourcesContent":["/**\n *\n * @class Track\n */\nexport class Track {\n\n    /**\n     *\n     * @param trackJSON\n     */\n    constructor(trackJSON) {\n\n        this.title = trackJSON.title;\n        this.fullTitle = trackJSON.fullTitle;\n        this.releaseDate = trackJSON.releaseDate;\n        this.releaseYear = trackJSON.releaseYear;\n        this.departmentNumber = trackJSON.departmentNumber;\n        this.departmentName = trackJSON.departmentName;\n        this.id = trackJSON.id;\n        this.artistID = trackJSON.artistID;\n        this.artist = trackJSON.artist;\n        this.content = trackJSON.content;\n\n        if (trackJSON.content) {\n            this.components = trackJSON.content\n                .replace(/,/g, ' ')\n                .replace(/\\./g, ' ')\n                .replace(/\\n/g, ' ')\n                .replace(/\\(/g, ' ')\n                .replace(/\\)/g, ' ')\n                .replace(/\\[/g, ' ')\n                .replace(/]/g, ' ')\n                .split(\" \")\n                .filter((word) => word.length > 0);\n        } else if (trackJSON.components) {\n            this.components = trackJSON.components;\n        }\n\n        this.componentsLowercased = this.components.map(item => item.toLowerCase());\n\n        let typesSet = new Set(this.components);\n        this.types = Array.from(typesSet);\n    }\n}\n","import {Track} from \"./track\";\n\n/**\n *\n */\nexport class Album {\n\n    constructor(albumJSON) {\n        this.name = albumJSON.name;\n        this.tracks = [];\n        for (let i = 0; i < albumJSON.tracks.length; i++) {\n            const trackJSON = albumJSON.tracks[i];\n            const track = new Track(trackJSON);\n            track.departmentNumber = albumJSON.departmentNo;\n            track.departmentName = albumJSON.departmentName;\n            track.artistID = albumJSON.geniusId;\n            track.artist = albumJSON.name;\n            this.tracks.push(track);\n        }\n    }\n}\n\nexports.Album = Album;","import {Album} from \"./album\";\nimport {Track} from \"./track\";\n\n/**\n *\n */\nexport class Artist {\n\n  constructor(artistJSON) {\n    this.name = artistJSON.name;\n    this.geniusId = artistJSON.geniusId;\n    this.sex = artistJSON.sex;\n    this.group = artistJSON.group;\n    this.department = artistJSON.department || artistJSON.departement;\n    this.departmentNo = artistJSON.departmentNo || artistJSON.departementNo;\n    this.departmentName = (artistJSON.department || artistJSON.departement)\n      .split(\"(\")[0]\n      .trim()\n      .toLowerCase();\n\n    this.albums = [];\n    for (let i = 0; i < artistJSON.albums.length; i++) {\n      const albumJSON = artistJSON.albums[i];\n      albumJSON.departmentNo = this.departmentNo;\n      albumJSON.departmentName = this.departmentName;\n      albumJSON.artistID = artistJSON.geniusId;\n      albumJSON.artist = artistJSON.name;\n      const album = new Album(albumJSON);\n      album.tracks.forEach(track => track.artistID = artistJSON.geniusId);\n      album.tracks.forEach(track => track.artist = artistJSON.name);\n      this.albums.push(album);\n    }\n\n    this.tracks = [];\n    for (let i = 0; i < artistJSON.tracks.length; i++) {\n      const trackJSON = artistJSON.tracks[i];\n      const track = new Track(trackJSON);\n      track.departmentNumber = this.departmentNo;\n      track.departmentName = this.departmentName;\n      track.artistID = artistJSON.geniusId;\n      track.artist = artistJSON.name;\n      this.tracks.push(track);\n    }\n  }\n\n  allTracks() {\n    let tracks = [];\n    for (let i = 0; i < this.albums.length; i++) {\n      const album = this.albums[i];\n      for (let i = 0; i < album.tracks.length; i++) {\n        tracks.push(album.tracks[i]);\n      }\n    }\n\n    for (let i = 0; i < this.tracks.length; i++) {\n      tracks.push(this.tracks[i]);\n    }\n    return tracks;\n  }\n\n  allWords() {\n    const allTracks = this.allTracks();\n    let allWords = [];\n    for (let i = 0; i < allTracks.length; i++) {\n      allWords.push(...allTracks[i].components);\n    }\n    return allWords;\n  }\n}\n\nexports.Artist = Artist;\n","import {Artist} from \"./artist\";\n\n/**\n *\n * @class Corpus\n */\nexport class Corpus {\n\n    /**\n     * Creates a new instace of Corpus.\n     *\n     * @param parsedCorpus\n     */\n    constructor(parsedCorpus) {\n        this.artists = [];\n        this.initialize(parsedCorpus);\n    }\n\n    /**\n     *\n     * @param parsedCorpus\n     */\n    initialize(parsedCorpus) {\n        for (let i = 0; i < parsedCorpus.length; i++) {\n            const artistJSON = parsedCorpus[i];\n            const artist = new Artist(artistJSON);\n            // const allTracks = artist.allTracks();\n            this.artists.push(artist);\n        }\n    }\n\n    /**\n     * Returns an array containing all female artists.\n     *\n     * @returns {*[]}\n     */\n    femaleArtists() {\n        return this.artists.filter(artist => artist.sex === \"F\");\n    }\n\n    /**\n     * Returns an array containing all male artists.\n     *\n     * @returns {*[]}\n     */\n    maleArtists() {\n        return this.artists.filter(artist => artist.sex === \"M\");\n    }\n\n    /**\n     * Returns an array containing all group artists.\n     *\n     * @returns {*[]}\n     */\n    groupArtists() {\n        return this.artists.filter(artist => artist.group === \"G\");\n    }\n\n    /**\n     * Returns an array with all tracks of the corpus.\n     *\n     * @returns {[]}\n     */\n    allTracks() {\n        let allTracks = [];\n        for (let i = 0; i < this.artists.length; i++) {\n            allTracks.push(...this.artists[i].allTracks());\n        }\n        return allTracks;\n    }\n\n    /**\n     * Returns an array of all words in the corpus.\n     *\n     * @returns {[]}\n     */\n    allWords() {\n        let allWords = [];\n        for (let i = 0; i < this.artists.length; i++) {\n            let wordsOfArtist = this.artists[i].allWords();\n            for (let i = 0; i < wordsOfArtist.length; i++) {\n                allWords.push(wordsOfArtist[i]);\n            }\n        }\n        return allWords;\n    }\n\n    /**\n     * Returns an array containing all albums in the corpus.\n     *\n     * @returns {[]}\n     */\n    allAlbums() {\n        let allAlbums = [];\n        for (let i = 0; i < this.artists.length; i++) {\n            allAlbums.push(...this.artists[i].albums);\n        }\n        return allAlbums;\n    }\n\n    /**\n     * Returns an array containing all tracks without an album.\n     * @returns {[]}\n     */\n    allTracksWithoutAlbum() {\n        let tracksWithoutAlbum = [];\n        for (let i = 0; i < this.artists.length; i++) {\n            tracksWithoutAlbum.push(...this.artists[i].tracks);\n        }\n        return tracksWithoutAlbum;\n    }\n\n    /**\n     * Returns an array containing all tracks which contains the given word.\n     *\n     * @param word\n     * @param sensitivity\n     * @returns {[]}\n     */\n    tracksForWord(word, sensitivity = 'case-sensitive') {\n        let tracks = [];\n        const allTracks = this.allTracks();\n\n        if (sensitivity === 'case-sensitive') {\n            for (let i = 0; i < allTracks.length; i++) {\n                if (allTracks[i].components.indexOf(word) !== -1) {\n                    tracks.push(new Track(allTracks[i]));\n                }\n            }\n        } else if (sensitivity === 'case-insensitive') {\n            word = word.toLowerCase();\n            for (let i = 0; i < allTracks.length; i++) {\n                if (allTracks[i].componentsLowercased.indexOf(word) !== -1) {\n                    tracks.push(new Track(allTracks[i]));\n                }\n            }\n        }\n\n        return tracks;\n    }\n\n    /**\n     * Returns the earliest year in the corpus.\n     * @returns {*}\n     */\n    getEarliestYear() {\n        let allTracks = this.allTracks();\n        let firstYear = allTracks.find(item => item !== undefined).releaseYear;\n        return this.allTracks().reduce((current, next) => current < next.releaseYear ? current : next.releaseYear, firstYear);\n    }\n\n    /**\n     * Returns the latest year of the corpus.\n     * @returns {*}\n     */\n    getLatestYear() {\n        let allTracks = this.allTracks();\n        let lastYear = allTracks.find(item => item !== undefined).releaseYear;\n        return this.allTracks().reduce((current, next) => current > next.releaseYear ? current : next.releaseYear, lastYear);\n    }\n\n    /**\n     * Returns departemente meta data.\n     * @returns {[]}\n     */\n    getDepartementsData() {\n        let departmentDatasets = [];\n        let allTracks = this.allTracks();\n        allTracks.forEach(function (track) {\n            let departmentNumber = track.departmentNumber;\n            let departmentName = track.departmentName;\n            let dataset = departmentDatasets.find(dataset => dataset.departmentNumber === departmentNumber);\n            if (dataset) {\n                dataset.value += 1;\n            } else {\n                departmentDatasets.push({\n                    departmentNumber: departmentNumber,\n                    departmentName: departmentName,\n                    value: 1\n                });\n            }\n        });\n\n        return departmentDatasets;\n    }\n\n    /**\n     * Returns a year to track collection.\n     *\n     * @returns {{}}\n     */\n    getLyricsPerYear() {\n        return this.createYearCollection(track => 1);\n    }\n\n    /**\n     * Returns a year to word collection.\n     * @returns {{}}\n     */\n    getWordsPerYear() {\n        return this.createYearCollection((track) => track.components.length);\n    }\n\n    /**\n     * Returns a year to words collection with relative values.\n     * @returns {{}}\n     */\n    getWordsPerYearRelative() {\n        let wordsPerYear = this.getWordsPerYear();\n        return this.calculateRelativeValues(wordsPerYear);\n    };\n\n    /**\n     * Returns a year to types collection.\n     *\n     * @returns {{}}\n     */\n    getTypesPerYear() {\n        return this.createYearCollection((track) => track.types.length);\n    };\n\n    /**\n     * Returns a year to types collection with relative values.\n     * @returns {{}}\n     */\n    getTypesPerYearRelative() {\n        let typesPerYear = this.getTypesPerYear();\n        return this.calculateRelativeValues(typesPerYear);\n    };\n\n    /**\n     * Returns a year to non standard words collection.\n     * @returns {{}}\n     */\n    getTotalNonStandardPerYearCount() {\n        return this.createYearCollection(0);\n    };\n\n    /**\n     * Return a year to.. collection.\n     * @param countFunction\n     * @returns {{}}\n     */\n    createYearCollection(countFunction) {\n        let allTracks = this.allTracks();\n        let yearCollection = {};\n        for (let i = 0; i < allTracks.length; i++) {\n            const track = allTracks[i];\n            const year = track.releaseYear;\n            if (yearCollection[year]) {\n                yearCollection[year] = yearCollection[year] + countFunction(track);\n            } else {\n                yearCollection[year] = countFunction(track);\n            }\n        }\n        return yearCollection;\n    };\n\n    /**\n     * Returns the relative version of the given year to.. collection.\n     * @param listPerYear\n     * @returns {{}}\n     */\n    calculateRelativeValues(listPerYear) {\n        let lyricsPerYear = this.getLyricsPerYear();\n        let yearCollection = {};\n        for (const yearKey in lyricsPerYear) {\n            if (lyricsPerYear.hasOwnProperty(yearKey)) {\n                let lyricsCount = lyricsPerYear[yearKey];\n                let wordsCount = listPerYear[yearKey];\n                yearCollection[yearKey] = wordsCount / lyricsCount;\n            }\n        }\n        return yearCollection;\n    };\n\n    /**\n     *\n     * @param tracks\n     * @param startYear\n     * @param lastYear\n     * @returns {[]}\n     */\n    getChartDataForTracks(tracks, startYear = 1995, lastYear = 2020) {\n        let dict = {};\n        let labels = [];\n        let values = [];\n        let valuesTotal = [];\n        let yearsTotal = [];\n\n        for (let year = startYear; year <= lastYear; year++) {\n            dict[year] = 0;\n            labels.push(year);\n        }\n\n        for (let i = 0; i < tracks.length; i++) {\n            const track = tracks[i];\n            const year = track.releaseYear;\n            if (dict[year]) {\n                dict[year] = dict[year] + 1;\n            } else {\n                dict[year] = 1;\n            }\n        }\n        labels = labels.sort();\n        if (!this.lyricsPerYear) {\n            this.lyricsPerYear = this.getLyricsPerYear();\n        }\n        let items = [];\n        for (let i = 0; i < labels.length; i++) {\n            const label = labels[i];\n            const value = dict[label] || 0;\n            const yearTotal = this.lyricsPerYear[label];\n            const relativeValue = value / yearTotal;\n            let relativeOrAbsolute = 'relative';\n            if (relativeOrAbsolute === 'relative') {\n                values.push(relativeValue);\n            } else {\n                values.push(value);\n            }\n            valuesTotal.push(value);\n            yearsTotal.push(yearTotal);\n            items.push({\n                // label: label,\n                year: label,\n                value: value,\n                yearTotal: yearTotal || 0,\n            });\n        }\n        return items;\n    };\n\n    /**\n     *\n     * @param tracks\n     * @returns {[]}\n     */\n    getMapDataForTracks(tracks) {\n        let dict = {};\n        let departmentNumbers = [];\n\n        for (let i = 0; i < tracks.length; i++) {\n            const track = tracks[i];\n            const departmentNumber = track.departmentNumber;\n\n            if (!departmentNumbers.includes(departmentNumber)) {\n                departmentNumbers.push(departmentNumber);\n            }\n\n            if (dict[departmentNumber]) {\n                dict[departmentNumber] = dict[departmentNumber] + 1;\n            } else {\n                dict[departmentNumber] = 1;\n            }\n        }\n\n        departmentNumbers = departmentNumbers.sort();\n\n        let items = [];\n        for (let i = 0; i < departmentNumbers.length; i++) {\n            const departmentNumber = departmentNumbers[i];\n            const value = dict[departmentNumber] || 0;\n            items.push({\n                dlabel: departmentNumber,\n                value: value,\n            });\n        }\n\n        return items;\n    }\n}\n","import {Corpus} from './corpus';\nimport {Artist} from \"./artist\";\nimport {Album} from \"./album\";\nimport {Track} from \"./track\";\n\n/**\n *\n * @class FRCDelegate\n */\nexport class FRCDelegate {\n\n  /**\n   * Creates a new instance of FRCDelegate.\n   */\n  constructor() {\n\n    this.name = 'French Rap Corpus Visualization';\n    this.geoJSON = 'assets/Departements-Simple.geojson';\n    this.dataJSON = 'assets/Corpus-Light.json';\n\n    let delegate = this;\n    this.loadData = function (progressFunction) {\n\n      return new Promise(function (resolve, reject) {\n\n        let req = new XMLHttpRequest();\n\n        req.addEventListener(\"progress\", function (event) {\n          if (event.lengthComputable) {\n            let percentComplete = event.loaded / event.total;\n            progressFunction(percentComplete, null);\n          } else {\n            let message = 'Unable to compute progress information since the total size is unknown';\n            progressFunction(null, message);\n          }\n        }, false);\n\n        // load responseText into a new script element\n        req.addEventListener(\"load\", function (event) {\n\n          let rawJSON = event.target.responseText;\n          delegate.rawJSON = rawJSON;\n\n          let corpusJSON = JSON.parse(rawJSON);\n          let corpus = new Corpus(corpusJSON);\n          delegate.corpus = corpus;\n\n          resolve(corpus);\n\n        }, false);\n\n        req.open(\"GET\", delegate.dataJSON);\n        req.send();\n      })\n    }.bind(this);\n  }\n}\n\nexports.Corpus = Corpus;\nexports.Artist = Artist;\nexports.Album = Album;\nexports.Track = Track;\n"],"names":["Track","[object Object]","trackJSON","this","title","fullTitle","releaseDate","releaseYear","departmentNumber","departmentName","id","artistID","artist","content","components","replace","split","filter","word","length","componentsLowercased","map","item","toLowerCase","typesSet","Set","types","Array","from","Album","albumJSON","name","tracks","i","track","departmentNo","geniusId","push","exports","Artist","artistJSON","sex","group","department","departement","departementNo","trim","albums","album","forEach","allTracks","allWords","Corpus","parsedCorpus","artists","initialize","wordsOfArtist","allAlbums","tracksWithoutAlbum","sensitivity","indexOf","firstYear","find","undefined","reduce","current","next","lastYear","departmentDatasets","dataset","value","createYearCollection","wordsPerYear","getWordsPerYear","calculateRelativeValues","typesPerYear","getTypesPerYear","countFunction","yearCollection","year","listPerYear","lyricsPerYear","getLyricsPerYear","yearKey","hasOwnProperty","lyricsCount","wordsCount","startYear","dict","labels","sort","items","label","yearTotal","departmentNumbers","includes","dlabel","geoJSON","dataJSON","delegate","loadData","progressFunction","Promise","resolve","reject","req","XMLHttpRequest","addEventListener","event","lengthComputable","percentComplete","loaded","total","rawJSON","target","responseText","corpusJSON","JSON","parse","corpus","open","send","bind"],"mappings":"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"}